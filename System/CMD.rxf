local CMDLOGGED = false
local CMDPARENT = "NONE"

local sDir = (parentShell and parentShell.dir()) or ""
local sPath = (parentShell and parentShell.path()) or ".:/rom/programs" or ".:/System/Programs"
local tAliases = (parentShell and parentShell.aliases()) or {}
local tCompletionInfo = (parentShell and parentShell.getCompletionInfo()) or {}
local tProgramStack = {}
local tEnv = {
    [ "shell" ] = shell,
    [ "multishell" ] = multishell,
    [ "System" ] = System
}

local rAliases = {
    [ "disconnect" ] = "/System/Programs/disconnect",
    [ "mon_connect" ] = "/System/Programs/mon_connect",
    [ "pwr" ] = "/System/Programs/pwr",
    [ "recovery" ] = "/System/Programs/recovery",
    [ "recovScript" ] = "/System/Programs/recovScript",
    [ "resize" ] = "/System/Programs/resize",
    [ "update" ] = "/System/Programs/update",
    [ "uptime" ] = "/System/Programs/uptime",
    [ "user" ] = "/System/Programs/user"
}

local function getTable(path)
    if fs.exists(path) then
        local file = io.open(path, "r")
        local lines = {}
        local i = 1
        local line = file:read("*l")
        while line ~= nil do
            lines[i] = line
            line = file:read("*l")
            i = i + 1
        end
        file:close()
        return lines
    end
    return {}
end

if not RitoOS_PersonalizationBackgroundColor or not RitoOS_PersonalizationTextColor2 or not RitoOS_PersonalizationBackgroundColor2 or not RitoOS_PersonalizationTextColor then
    _G.RitoOS_PersonalizationBackgroundColor = colors.lightBlue
    _G.RitoOS_PersonalizationBackgroundColor2 = colors.gray
    _G.RitoOS_PersonalizationTextColor = colors.black
    _G.RitoOS_PersonalizationTextColor2 = colors.white
end

--Check to see if the user is logged in.
if loggedIn == true then
    System.logInfo("CMD","CodeX user logged in from recovery.")
    --Yes, but from recovery.
    CMDLOGGED = true
    CMDPARENT = "Recovery"
else
    if CodeX.checkLoggedIn() then
        CMDLOGGED = true
        CMDPARENT = "CodeX"
    else
        System.logWarn("CMD","Failed to authorize the user. (CodeX_HasUserLogged failed to match.)")
    end
end


if CMDLOGGED == true then
    System.logInfo("CMD","CMDLOGGED is reported as true. CMDPARENT: "..CMDPARENT)
else
    System.logAlert("CMD","No user is logged in.")
    error("There is no user logged in.")
end


local function append(text, path)
    local file = assert(io.open(path, "a"))
    file:write(text.."\n")
    file:close()
end

-- Simple Write Script
local function fwrite(path, text)
        local file = assert(io.open(path, "w"))
        file:write(text)
        file:close()
end
-- End

--Center Text
local function PrintCentered(sText)
msgLen = string.len(sText)
screenWidth,_ = term.getSize()
xCoords = tonumber(math.ceil((screenWidth / 2) - (msgLen / 2)))
_,termY = term.getCursorPos()
term.setCursorPos(xCoords,termY)
print(sText)
return xCoords
end

function downloadPaste(path,code)
    if http then
        local h=http.get('http://pastebin.com/raw.php?i='..code)
        if h then
            local f=fs.open(path,'w')
            f.write(h.readAll())
            f.close()
            h.close()
            return true
        else
            return false
        end
    else
            printError("/- Http not enabled! Please enable http -/")
            sleep(1)
            return false
    end
end
CMDVer = '0.5'

local function run( _sCommand, ... )
    local sPath = shell.resolveProgram( _sCommand )
    local Xcord, Ycord = term.getCursorPos()
    term.setCursorPos(1, 1)
    term.setTextColour(RitoOS_PersonalizationTextColor2)
    term.setBackgroundColor(RitoOS_PersonalizationBackgroundColor2)
    term.clearLine()
    PrintCentered("Rito OS CMD V"..os.version())
    if ... ~= nil then
        term.clearLine()
        PrintCentered(_sCommand, ...)
        System.logInfo("CMD - User","[ Run command ] ".._sCommand .. " " .. ...)
        term.clearLine()
    else
        term.clearLine()
        PrintCentered(_sCommand)
        System.logInfo("CMD - User","[ Run command ] ".._sCommand)
        term.clearLine()
    end
    term.setBackgroundColor(RitoOS_PersonalizationBackgroundColor)
    term.setCursorPos(Xcord, Ycord)
    term.setTextColour(RitoOS_PersonalizationTextColor)
    local sPath = shell.resolveProgram( _sCommand )
    if _sCommand == "restart" then
        print("Restarting the prompt...")
        dofile("/System/CMD.rxf")
    elseif _sCommand == "reboot" then
        os.reboot()
    elseif _sCommand == "shutdown" then
        os.shutdown()
    elseif _sCommand == "CrashMe!" then
        error("System.CMD.User.crash")
    elseif _sCommand == "exit" then
        error("Exit Command Ran")
    elseif _sCommand == "logout" then
        CodeX.logout()
    elseif _sCommand == "commands" then
        print("Rito commands:")
        print("reboot  - Reboots the computer")
        print("shutdown  - Shutdown the computer")
        print("update  - Update RitoOS")
        print("exit  - Exit and close explorera")
        print("recovery  - Reboot into recovery mode")
        print("logout - Logout of your account")
        print("user - Edit user account info")
        print("disconnect - Disconnect from a monitor")
        print("resize - Resize the UI on a monitor")
        print("uptime - Check RitoOS's uptime")
        print("mon_connect - Connect to a monitor")
    else
        if sPath ~= nil then
        tProgramStack[#tProgramStack + 1] = sPath
        if multishell then
            multishell.setTitle( multishell.getCurrent(), fs.getName( sPath ) )
        end
        local result = os.run( tEnv, sPath, ... )
        tProgramStack[#tProgramStack] = nil
        if multishell then
            if #tProgramStack > 0 then
                multishell.setTitle( multishell.getCurrent(), fs.getName( tProgramStack[#tProgramStack] ) )
            else
                multishell.setTitle( multishell.getCurrent(), "shell" )
            end
        end
        return result
        else
            printError("\"".._sCommand.."\" is neither a command nor a program.")
        end
    end
end -- End The Function

local function runLine( _sLine )
    local tWords = {}
    for match in string.gmatch( _sLine, "[^ \t]+" ) do
        table.insert( tWords, match )
    end

    local sCommand = tWords[1]
    if sCommand then
        return RunCommand( sCommand, unpack( tWords, 2 ) )
    end
    return false
end


local function tokenise( ... )
    local sLine = table.concat( { ... }, " " )
    local tWords = {}
    local bQuoted = false
    for match in string.gmatch( sLine .. "\"", "(.-)\"" ) do
        if bQuoted then
            table.insert( tWords, match )
        else
            for m in string.gmatch( match, "[^ \t]+" ) do
                table.insert( tWords, m )
            end
        end
        bQuoted = not bQuoted
    end
    return tWords
end

-- Install shell API
function shell.run( ... )
    local tWords = tokenise( ... )
    local sCommand = tWords[1]
    if sCommand then
        return run( sCommand, table.unpack( tWords, 2 ) )
    end
    return false
end

function shell.resolve( _sPath )
    local sStartChar = string.sub( _sPath, 1, 1 )
    if sStartChar == "/" or sStartChar == "\\" then
        return fs.combine( "", _sPath )
    else
        return fs.combine( sDir, _sPath )
    end
end

function shell.resolveProgram( _sCommand )
    -- RitoOS commands.
    if rAliases[ _sCommand ] ~= nil then
        _sCommand = rAliases[ _sCommand ]
    end

    -- Substitute aliases firsts
    if tAliases[ _sCommand ] ~= nil then
        _sCommand = tAliases[ _sCommand ]
    end



    -- If the path is a global path, use it directly
    local sStartChar = string.sub( _sCommand, 1, 1 )
    if sStartChar == "/" or sStartChar == "\\" then
        local sPath = fs.combine( "", _sCommand )
        if fs.exists( sPath ) and not fs.isDir( sPath ) then
            return sPath
        end
        return nil
    end
    
    -- Otherwise, look on the path variable
    for sPath in string.gmatch(sPath, "[^:]+") do
        sPath = fs.combine( shell.resolve( sPath ), _sCommand )
        if fs.exists( sPath ) and not fs.isDir( sPath ) then
            return sPath
        end
    end
    
    -- Not found
    return nil
end


local function RPrograms( _bIncludeHidden )
    local tItems = {}
    
    -- Add programs from the path
    for sPath in string.gmatch("/System/Programs/", "[^:]+") do
        sPath = shell.resolve( "/System/Programs/" )
        if fs.isDir( "/System/Programs/" ) then
            local tList = fs.list( "/System/Programs/" )
            for n=1,#tList do
                local sFile = tList[n]
                if not fs.isDir( fs.combine( "/System/Programs/", sFile ) ) and
                   (_bIncludeHidden or string.sub( sFile, 1, 1 ) ~= ".") then
                    tItems[ sFile ] = true
                end
            end
        end
    end 

    -- Sort and return
    local tItemList = {}
    for sItem, b in pairs( tItems ) do
        table.insert( tItemList, sItem )
    end
    table.sort( tItemList )
    return tItemList
end

function Programs( _bIncludeHidden )
    local tItems = {}
    
    -- Add programs from the path
    for sPath in string.gmatch(sPath, "[^:]+") do
        sPath = shell.resolve( sPath )
        if fs.isDir( sPath ) then
            local tList = fs.list( sPath )
            for n=1,#tList do
                local sFile = tList[n]
                if not fs.isDir( fs.combine( sPath, sFile ) ) and
                   (_bIncludeHidden or string.sub( sFile, 1, 1 ) ~= ".") then
                    tItems[ sFile ] = true
                end
            end
        end
    end 

    -- Sort and return
    local tItemList = {}
    for sItem, b in pairs( tItems ) do
        table.insert( tItemList, sItem )
    end
    table.sort( tItemList )
    return tItemList
end

local function completeProgram( sLine )
    if #sLine > 0 and string.sub( sLine, 1, 1 ) == "/" then
        -- Add programs from the root
        return fs.complete( sLine, "", true, false )

    else
        local tResults = {}
        local tSeen = {}

        -- Add RitoOS's programs
        local tPrograms = RPrograms()
        for n=1,#tPrograms do
            local sProgram = tPrograms[n]
            if #sProgram > #sLine and string.sub( sProgram, 1, #sLine ) == sLine then
                local sResult = string.sub( sProgram, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Add aliases
        for sAlias, sCommand in pairs( tAliases ) do
            if #sAlias > #sLine and string.sub( sAlias, 1, #sLine ) == sLine then
                local sResult = string.sub( sAlias, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Add programs from the path
        local tPrograms = Programs()
        for n=1,#tPrograms do
            local sProgram = tPrograms[n]
            if #sProgram > #sLine and string.sub( sProgram, 1, #sLine ) == sLine then
                local sResult = string.sub( sProgram, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Sort and return
        table.sort( tResults )
        return tResults
    end
end

local function completeProgramArgument( sProgram, nArgument, sPart, tPreviousParts )
    local tInfo = tCompletionInfo[ sProgram ]
    if tInfo then
        return tInfo.fnComplete( shell, nArgument, sPart, tPreviousParts )
    end
    return nil
end

function shell.complete( sLine )
    if #sLine > 0 then
        local tWords = tokenise( sLine )
        local nIndex = #tWords
        if string.sub( sLine, #sLine, #sLine ) == " " then
            nIndex = nIndex + 1
        end
        if nIndex == 1 then
            local sBit = tWords[1] or ""
            local sPath = shell.resolveProgram( sBit )
            if tCompletionInfo[ sPath ] then
                return { " " }
            else
                local tResults = completeProgram( sBit )
                for n=1,#tResults do
                    local sResult = tResults[n]
                    local sPath = shell.resolveProgram( sBit .. sResult )
                    if tCompletionInfo[ sPath ] then
                        tResults[n] = sResult .. " "
                    end
                end
                return tResults
            end

        elseif nIndex > 1 then
            local sPath = shell.resolveProgram( tWords[1] )
            local sPart = tWords[nIndex] or ""
            local tPreviousParts = tWords
            tPreviousParts[nIndex] = nil
            return completeProgramArgument( sPath , nIndex - 1, sPart, tPreviousParts )

        end
    end
    return nil
end


local function command()
term.setBackgroundColor(RitoOS_PersonalizationBackgroundColor)
term.setTextColour(RitoOS_PersonalizationTextColor2)
term.clear()
term.setCursorPos(1,1)
term.setBackgroundColor(RitoOS_PersonalizationBackgroundColor2)
term.clearLine()
PrintCentered("Rito OS CMD V"..os.version())
term.clearLine()
PrintCentered("For help, type 'commands'")
term.clearLine()
PrintCentered("You are in your home folder, do 'cd /'")
term.setBackgroundColor(RitoOS_PersonalizationBackgroundColor)
print()
if CodeX_Username then
shell.setDir("/Users/"..CodeX_Username.."")
else
shell.setDir("/")
end
local tCommandHistory = {}
while not bExit do
    _on_promt_ = true
    term.setBackgroundColor(RitoOS_PersonalizationBackgroundColor)
    term.setTextColour(RitoOS_PersonalizationTextColor)
    local Xcord, Ycord = term.getCursorPos()
    if Ycord == 1 then
    Ycord = 4
    term.setCursorPos(Xcord, Ycord)
    else
    term.setCursorPos(Xcord, Ycord)
    end
    write( "{-" .. shell.dir() .. "-} " )
    local sLine = read( nil, tCommandHistory, shell.complete )
    table.insert( tCommandHistory, sLine )
    shell.run( sLine )
end
end --command
command()
local function getTable(path)
    if fs.exists(path) then
        local file = io.open(path, "r")
        local lines = {}
        local i = 1
        local line = file:read("*l")
        while line ~= nil do
            lines[i] = line
            line = file:read("*l")
            i = i + 1
        end
        file:close()
        return lines
    end
    return {}
end
local function append(text, path)
    local file = assert(io.open(path, "a"))
    file:write(text.."\n")
    file:close()
end

Explorera_User_Prompt_Color = 512
Explorera_User_Background_Color = 32768
Explorera_User_Text_Color = 2048

local function config()
    if CodeX_Username then
        if fs.exists("/Users/"..CodeX_Username.."/.Configs/Explorera.conf") == true then
            local userfile =  getTable("/Users/"..CodeX_Username.."/.Configs/Explorera.conf")
            Explorera_User_Background_Color = tonumber(string.sub(userfile[1],string.find(userfile[1],":")+2))
            Explorera_User_Prompt_Color = tonumber(string.sub(userfile[2],string.find(userfile[2],":")+2))
            Explorera_User_Text_Color = tonumber(string.sub(userfile[3],string.find(userfile[3],":")+2))
        end
    else
            local RitoOS_Config = getTable("/System/Configs/.Rito.conf")
            Explorera_User_Prompt_Color = tonumber(string.sub(RitoOS_Config[36],string.find(RitoOS_Config[36],":")+2))
            Explorera_User_Background_Color = tonumber(string.sub(RitoOS_Config[37],string.find(RitoOS_Config[37],":")+2))
            Explorera_User_Text_Color = tonumber(string.sub(RitoOS_Config[38],string.find(RitoOS_Config[38],":")+2))
    end
end
-- Simple Write Script
local function fwrite(path, text)
        local file = assert(io.open(path, "w"))
        file:write(text)
        file:close()
end
-- End

--Center Text
local function PrintCentered(sText)
msgLen = string.len(sText)
screenWidth,_ = term.getSize()
xCoords = tonumber(math.ceil((screenWidth / 2) - (msgLen / 2)))
_,termY = term.getCursorPos()
term.setCursorPos(xCoords,termY)
print(sText)
return xCoords
end
function downloadPaste(path,code)
    if http then
        local h=http.get('http://pastebin.com/raw.php?i='..code)
        if h then
            local f=fs.open(path,'w')
            f.write(h.readAll())
            f.close()
            h.close()
            return true
        else
            return false
        end
    else
            printError("/- Http not enabled! Please enable http -/")
            sleep(1)
            return false
    end
end
CMDVer = '0.5'
function os.pullEvent( sFilter )
    local eventData = { os.pullEventRaw( sFilter ) }
    if eventData[1] == "terminate" then
        if Termed ~= true then
           term.setTextColour(Explorera_User_Prompt_Color)
            CodeX_logout()
            Termed = true
        end
    end
    return unpack( eventData )
end


local function RunCommand( _sCommand, ... )
    local Xcord, Ycord = term.getCursorPos()
    term.setCursorPos(1, 1)
    term.setTextColour(Explorera_User_Prompt_Color)
    term.clearLine()
    PrintCentered("Rito OS CMD V"..os.version())
    term.clearLine()
    PrintCentered("For help, type 'commands'")
    if ... ~= nil then
        term.clearLine()
        PrintCentered(_sCommand, ...)
        system.log("CMD - User","[ Run command ] ".._sCommand .. " " .. ...)
    else
        term.clearLine()
        PrintCentered(_sCommand)
        system.log("CMD - User","[ Run command ] ".._sCommand)
    end
    term.setCursorPos(Xcord, Ycord)
    term.setTextColour(Explorera_User_Text_Color)
    if _sCommand == "reboot" then
        os.reboot()
    elseif _sCommand == "shutdown" then
        os.shutdown()
    elseif _sCommand == "recovery" then
        RitoOSEnter_Recovery = true
    elseif _sCommand == "update" then
        PrintCentered("/- Updating -/")
        updateGit("/System/.Updater/UpgradeSystem.rxf")
        PrintCentered("/- Please type 'upgrade' to upgrade the system -/")
    elseif _sCommand == "upgrade" then
        shell.run("/System/.Updater/UpgradeSystem.rxf")
    elseif _sCommand == "CrashMe!" then
        print("Okay.")
        sleep(5)
        rit.run("rit.crash")
    elseif _sCommand == "exit" then
        error("Exit Command Ran")
    elseif _sCommand == "logout" then
        CodeX_logout()
    elseif _sCommand == "user" then
        shell.run("/System/User.rxf")
        term.setBackgroundColour(Explorera_User_Background_Color)
        term.clear()
    elseif _sCommand == "resize" then
        shell.run("/System/Programs/resize")
    elseif _sCommand == "disconnect" then
        shell.run("/System/Programs/disconnect")
    elseif _sCommand == "uptime" then
        shell.run("/System/Programs/uptime")
    elseif _sCommand == "mon_connect" then
        shell.run("/System/Programs/mon_connect")
    elseif _sCommand == "commands" then
        print("Rito commands:")
        print("reboot  - Reboots the computer")
        print("shutdown  - Shutdown the computer")
        print("update  - Update RitoOS")
        print("exit  - Exit and close explorera")
        print("recovery  - Reboot into recovery mode")
        print("logout - Logout of your account")
        print("user - Edit user account info")
        print("disconnect - Disconnect from a monitor")
        print("resize - Resize the UI on a monitor")
        print("uptime - Check RitoOS's uptime")
        print("mon_connect - Connect to a monitor")
    elseif _sCommand ~= nil then
            if ... ~=nil then
                if shell.run(_sCommand,...) == false then
                    printError("Could not run ".._sCommand.." ".. ...)
                end
            else
                if shell.run(_sCommand) == false then
                    printError("Could not run ".._sCommand)
                end
            end
    else
        printError("Unknown Command, ".._sCommand)
    end
end -- End The Function

local function runLine( _sLine )
    local tWords = {}
    for match in string.gmatch( _sLine, "[^ \t]+" ) do
        table.insert( tWords, match )
    end

    local sCommand = tWords[1]
    if sCommand then
        return RunCommand( sCommand, unpack( tWords, 2 ) )
    end
    return false
end

local function command()
term.setBackgroundColor(Explorera_User_Background_Color)
term.setTextColour(Explorera_User_Prompt_Color)
term.clear()
term.setCursorPos(1,1)
PrintCentered("Rito OS CMD V"..os.version())
PrintCentered("For help, type 'commands'")
PrintCentered("You are in your home folder, do 'cd /'")
if CodeX_Username then
shell.setDir("/Users/"..CodeX_Username.."")
else
shell.setDir("/")
end
local tCommandHistory = {}
while not bExit do
    _on_promt_ = true
    term.setBackgroundColor(Explorera_User_Background_Color)
    term.setTextColour(Explorera_User_Prompt_Color)
    local Xcord, Ycord = term.getCursorPos()
    if Ycord == 1 then
    Ycord = 4
    term.setCursorPos(Xcord, Ycord)
    else
    term.setCursorPos(Xcord, Ycord)
    end
    write( "/" .. shell.dir() .. "/-} " )
    term.setTextColour(Explorera_User_Text_Color)
    local sLine = read( nil, tCommandHistory )
    table.insert( tCommandHistory, sLine )
    _on_promt_ = false
    runLine( sLine )
end
end --command
parallel.waitForAll(config,command)
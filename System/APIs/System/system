function logAlert(s, m)
    if s == nil then
        local s = ""
    end
    file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|!A] "..s.." | "..m.."\n")
    file:close()
end
function logWarn(s, m)
    if s == nil then
        local s = ""
    end
    file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|!Warn] "..s.." | "..m.."\n")
    file:close()
end
function logInfo(s, m)
    if s == nil then
        local s = ""
    end
    file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|Info] "..s.." | "..m.."\n")
    file:close()
end

function log(t, m)
    local file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|"..t.."] "..m.."\n")
    file:close()
end
function reloadLog()
    if fs.exists("/System/Latest.log") then
        local oldLog = fs.open("/System/Latest.log","w")
        oldLog.write("")
        oldLog.close()
    end
    local h = assert(io.open("/System/Latest.log","w"))
    h:write("|-= RitoOS log =-|\n|-/ Log reloaded on: "..os.time().." /-|\n\n")
    h:close()
end
function startupFile()
    return 'if not term.isColor() then\n    colors.red = colors.black\n    colors.green = colors.gray\n    colors.brown = colors.black\n    colors.blue = colors.gray\n    colors.purple = colors.gray\n    colors.cyan = colors.gray\n    colors.pink = colors.gray\n    colors.lime = colors.lightGray\n    colors.yellow = colors.white\n    colors.lightBlue = colors.white\n    colors.magenta = colors.white\n    colors.orange = colors.lightGray\nend\nlocal ok, err = pcall(function() dofile("/System/.Boot/Boot.lua") end)\nif not ok then\n        function os.pullEvent( _sFilter )\n            local event, p1, p2, p3, p4, p5 = os.pullEventRaw( _sFilter )\n            if event == "terminate" then\n                sleep(1)\n            end\n            return event, p1, p2, p3, p4, p5\n        end\n    if err == nil then\n        err = "No error code, however, this was reported from the startup file. (/Startup)."\n    end\n    local crash = assert(io.open("/crash.log", "w"))\n    crash:write("RitoOS crashed! D: . Error: "..err.." . Os.version: "..os.version().." . Os.time(): "..os.time())\n    crash:close()\n    local x,Y = term.getSize()\n    term.setBackgroundColor(white)\n    term.clear()\n    sleep(0)\n    term.setCursorPos(math.floor(x-string.len("Sorry about that :("))/2, 2)\n    term.setTextColor(red)\n    write("Sorry about that. ): ")\n    term.setTextColor(black)\n    term.setCursorPos(math.floor(x-string.len("RicoOS has crashed."))/2, 5)\n    print("RitoOS has crashed.")\n    term.setCursorPos(3, 7)\n    print("Please, report this error to Watsuprico via PM:")\n    term.setTextColor(red)\n    term.setCursorPos(3, 8)\n    print(err)\n    print()\n    print()\n    term.setTextColor(gray)\n    term.setCursorPos(math.floor(x-string.len("Please remember, when sending the bug report"))/2, 11)\n    print("Please remember, when sending the bug report")\n    term.setCursorPos(math.floor(x-string.len(".include the log file at /crash.log"))/2, 12)\n    print("include the log file at: /crash.log")\n    print()\n    print("Press R to enter recovery.")\n    print("Press any other key to shutdown.")\n    sleep(1)\n    local e,s = os.pullEvent("key")\n    while true do\n        sleep(0)\n        if s == 19 then\n            shell.run("/System/.Recovery/.Recover")\n            printError("RitoOS shutting down.")\n            sleep(2)\n            os.shutdown(0,true)\n        else\n            os.shutdown(0,true)\n        end\n    end\nend'
end

function saveRecoveryScript(s)
    file = assert(io.open("/System/.Recovery/recoveryScript.arg","w"))
    file:write("--Recovery Script saved on "..os.uptime().." --\n\n--Recovery script:\n"..s)
    file:close()
    return true
end

function runRecoveryScript(s)
    os.runRecovScript()
    return true
end

function transColor(c)
    if c == 1 then
        return colors.white
    elseif c == 2 then
        return colors.orange
    elseif c == 4 then
        return colors.magenta
    elseif c == 8 then
        return colors.lightBlue
    elseif c == 16 then
        return colors.yellow
    elseif c == 32 then
        return colors.lime
    elseif c == 64 then
        return colors.pink
    elseif c == 128 then
        return colors.gray
    elseif c == 256 then
        return colors.lightGray
    elseif c == 512 then
        return colors.cyan
    elseif c == 1024 then
        return colors.purple
    elseif c == 2048 then
        return colors.blue
    elseif c == 4096 then
        return colors.brown
    elseif c == 8192 then
        return colors.green
    elseif c == 16384 then
        return colors.red
    else
        return colors.black
    end
end

function stringToColor(s)
    if s=="colors.white" then return colors.white
    elseif s=="colors.orange" then return colors.orange
    elseif s=="colors.magenta" then return colors.magenta
    elseif s=="colors.lightBlue" then return colors.lightBlue
    elseif s=="colors.yellow" then return colors.yellow
    elseif s=="colors.lime" then return colors.lime
    elseif s=="colors.pink" then return colors.pink
    elseif s=="colors.gray" then return colors.gray
    elseif s=="colors.lightGray" then return colors.lightGray
    elseif s=="colors.cyan" then return colors.cyan
    elseif s=="colors.purple" then return colors.purple
    elseif s=="colors.blue" then return colors.blue
    elseif s=="colors.brown" then return colors.brown
    elseif s=="colors.green" then return colors.green
    elseif s=="colors.red" then return colors.red
    else return colors.black end
end

function aniMidUp(color, wait, textcolor, text) -- From the mid up
    wait = wait or 0
    if wait ~= 0 then sleep(wait) end
    local X,YMaster = term.getSize() local Y=YMaster/2 -- Get the max y, make it half.
    while Y>=0 do
        if _G.allowAnimations then sleep(_G.AnimationDelay) end
        term.setCursorPos(1,Y) term.setBackgroundColor(color) term.clearLine()
        if text and textcolor then term.setTextColor(textcolor) term.setCursorPos(math.floor(X-string.len(text))/2, YMaster/2) print(text) end
        Y=Y-1
    end
end
-- aniT(color,wait) --MidUp

-- aniB(color,wait) --MidDown
function aniMidDown(color, wait) -- From the mid down
    wait = wait or 0
    if wait ~= 0 then sleep(wait) end
    local X,YMaster = term.getSize() local Y=YMaster/2 local YM=YMaster+1 -- Get the max y, make it half, make the middle of the screen half y+1
    while Y<=YM do
        if _G.allowAnimations then sleep(_G.AnimationDelay) end
        term.setCursorPos(1,Y) term.setBackgroundColor(color) term.clearLine()
        Y=Y+1
    end
end

function aniTopMid(color, wait)
    if wait ~= 0 then sleep(wait) end
    local X,Y = term.getSize() local YC=Y/2
    while Y>=YC do
        if _G.allowAnimations then sleep(_G.AnimationDelay) end
        term.setCursorPos(1,Y) term.setBackgroundColor(color) term.clearLine()
        Y=Y-1
    end
end

function aniBottomMid(color, wait)
    if wait ~= 0 then sleep(wait) end
    local X,Y = term.getSize() local YC=Y/2 local Y=1
    while Y<=YC do
        if _G.allowAnimations then sleep(_G.AnimationDelay) end
        term.setCursorPos(1,Y) term.setBackgroundColor(color) term.clearLine()
        Y=Y+1
    end
end

function redirectterm(newTerm)
    term.redirect(newTerm)
end

function oldTermMessage(oldTerm)
    oldTerm.setBackgroundColor(colors.white)
    oldTerm.setTextColor(colors.black)
    oldTerm.clear()
    local x,y = oldTerm.getSize()
    oldTerm.setCursorPos((x/2)-3, y/2-1)
    oldTerm.write("RitoOS")
    oldTerm.setCursorPos((x/2)-24, (y/2)+1)
    oldTerm.setTextColor(colors.orange)
    oldTerm.write("If you are reading this message, RitoOS redirected")
    oldTerm.setCursorPos((x/2)-23, (y/2)+2)
    oldTerm.write("to another \"window\", and for some reason you can")
    oldTerm.setCursorPos((x/2)-21.5, (y/2)+3)
    oldTerm.write("not view this \"window\". Please reboot into")
    oldTerm.setCursorPos((x/2)-10.5, (y/2)+4)
    oldTerm.write("recovery if this continues.")
end
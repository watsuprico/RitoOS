function outputAlert(m, __State)
    local mhf = ""
    local mhb = ""
    term.setTextColor(16384)
    if __State == nil then
        __State = "RitoOS"
    end
    print("["..os.uptime().."|!A] "..mhf..__State.." | "..m..mhb)
    local file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|!A] "..mhf..__State.." | "..m..mhb.."\n")
    file:close()
end
function outputWarn(m, __State)
    local mhf = ""
    local mhb = ""
    term.setTextColor(2)
    if __State == nil then
        __State = "RitoOS"
    end
    print("["..os.uptime().."|!W] "..mhf..__State.." | "..m..mhb)
    local file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|W!] "..mhf..__State.." | "..m..mhb.."\n")
    file:close()
end
function outputInfo(m, __State)
    local mhf = ""
    local mhb = ""
    term.setTextColor(8192)
    if __State == nil then
        __State = "RitoOS"
    end
    print("["..os.uptime().."|Info] "..mhf..__State.." | "..m..mhb)
    local file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|Info] "..mhf..__State.." | "..m..mhb.."\n")
    file:close()
end

function logAlert(s, m)
    if s == nil then
        local s = ""
    end
    file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|!A] "..s.." | "..m.."\n")
    file:close()
end
function logWarn(s, m)
    if s == nil then
        local s = ""
    end
    file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|!Warn] "..s.." | "..m.."\n")
    file:close()
end
function logInfo(s, m)
    if s == nil then
        local s = ""
    end
    file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|Info] "..s.." | "..m.."\n")
    file:close()
end

function log(t, m)
    local file = assert(io.open("/System/Latest.log", "a"))
    file:write("["..os.uptime().."|"..t.."] "..m.."\n")
    file:close()
end
function reloadLog()
    if fs.exists("/System/Latest.log") then
        fs.delete("/System/Latest.log")
    end
    local h = assert(io.open("/System/Latest.log","w"))
    h:write("-- RitoOS log --\n")
    h:close()
end
function startupFile()
    return "local function main()\ndofile('/System/.Boot/Boot')\ndo return end\nend\nlocal ok, err = pcall(main)\nif not ok then\n    local x,_ = term.getSize()\n    term.setBackgroundColor(colors.blue)\n    term.setTextColor(1)\n    term.clear()\n    term.setCursorPos(math.floor(x-string.len(':('))/2,2)\n    print(':(')\n    term.setCursorPos(math.floor(x-string.len('Fatal error!'))/2, 4)\n    print('Fatal error!')\n    term.setTextColor(colors.red)\n    term.setCursorPos(3, 6)\n    print(err)\n    term.setTextColor(1)\n    term.setCursorPos(math.floor(x-string.len('Try running: /System/.Recovery/.Recover '))/2, 10)\n    print('Try running: /System/.Recovery/.Recover ')\nend"
end
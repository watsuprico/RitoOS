-- RITO OS RECOVERY V0.1
--[[


                        _________
                       |_|_|_|_|_|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
      ___________________|__|__|___
     /                             \
    /     Rito OS, Created By:      \
   /          @Watsuprico            \
  /                                   \
 /   Bedrock API/Framwork Created By:  \
/                                       \
|_______________________________________|
|                                       |
|   _______                   _______   |
|  |   |   |                 |   |   |  |
|  |---|---|                 |---|---|  |
|  |___|___|                 |___|___|  |
|                                       |
|                                       |
|                                       |
|               _________               |
|              |         |              |
|              |  Rito   |              |
|              |         |              |
|              |       Ïƒ |              |
|              |         |              |
|______________|_________|______________|
]]--
-- Functions
local function trunc(s, i)
    local mult = 10^(i or 0)
    return math.floor(s * mult + 0.5) / mult
end
local function ALERT(m)
    term.setTextColor(ALERTCOLOR)
    print("[ "..trunc(os.time() * 50).." - ALERT] "..m)
    print()
    term.setTextColor(colors.black)
end
local function WARN(m)
    term.setTextColor(WARNCOLOR)
    print("[ "..trunc(os.time() * 50).." - WARN] "..m)
    print()
    term.setTextColor(colors.black)
end
local function INFO(m)
    term.setTextColor(INFOCOLOR)
    print("[ "..trunc(os.time() * 50).." - Info] "..m)
    print()
    term.setTextColor(colors.black)
end
local function NOTE(m)
    term.setTextColor(NOTECOLOR)
    print("[ "..trunc(os.time() * 50).." - Notify] "..m)
    term.setTextColor(colors.black)
end
local function PrintCentered(m)
local _mL = string.len(m)
local _scw,_ = term.getSize()
local _xC = tonumber(math.ceil((_scw / 2) - (_mL / 2)))
local _,tY = term.getCursorPos()
term.setCursorPos(_xC,tY)
print(m)
end
local function c()
  term.clear()
end
local function stc(c)
  term.setTextColor(c)
end
local function sbc(c)
  term.setBackgroundColor(c)
end
local function scp(x,y)
  term.setCursorPos(x,y)
end
-- End functions
function start()
sleep(1)
c()
stc(colors.white)
sbc(colors.blue)
c()
scp(1,1)
sbc(colors.cyan)
term.clearLine()
PrintCentered("Rito OS Recovery")
sbc(colors.blue)
print("Please select an option ")


local menu_options = { --This is our menu table. It contains basic data about the menu
  [1] = {text="Exit", color=colors.red},
  [2] = {text="Shutdown", color=colors.orange},
  [3] = {text="Update", color=colors.green},
  [4] = {text="Roll Back", color=colors.brown},
  [5] = {text="Wipe computer", color=colors.red}
}
local termX, termY = term.getSize() --The x/y size of the terminal
local function menuDraw(selected) --Our main draw function
  local yPos = termY/2 - #menu_options/2 --The initial y position
  for index, data in pairs(menu_options) do
    menu_options[index].bounds = { --Create a new table in each option with the boundary data
      x1 = termX/2 - (#data.text+4)/2;
      x2 = termX/2 + (#data.text+4)/2;
      y = yPos;
    }
    term.setTextColor(data.color)
    term.setCursorPos(data.bounds.x1, data.bounds.y)
 
    local text =
      index==selected and "- "..data.text.."" or
      "| "..data.text.."" --Essentially an if statement, but in a contracted form
    term.write(text)
    yPos = yPos+1 --Increment the initial y pos so we can move on the next line
  end
end
 
local function checkClick(x,y) --Check the mouse click to see if there's a menu option
  for index, data in pairs(menu_options) do
    if x>= data.bounds.x1 and x<= data.bounds.x2 and y==data.bounds.y then
      return index --Returns the index of the clicked option
    end
  end
  return false --If it went through the entire for loop without success, return false
end
 
local selector = 1 --Our selector
while true do --The main loop. I would generally put this inside of a function for a program.
  menuDraw(selector) --Draw the menu first
  local e = {os.pullEvent()} --Pull an event and put the returned values into a table
  if e[1] == "key" then --If it's a key...
    if e[2] == keys.down then -- ... and it's the down arrow
      selector = selector < #menu_options and selector+1 or 1 --Increment the selector if the selector < #menu_options. Otherwise reset it to 1
    elseif e[2] == keys.up then
      selector = selector > 1 and selector-1 or #menu_options --Decrement the selector if the selector > 1. Otherwise, reset it to #menu_options
    elseif e[2] == keys.enter then
      if selector == 1 then --Exit
        __RitoOS__Enter_Recovery = nil
        os.reboot()
      elseif selector == 2 then --Shutdown
        __RitoOS__Enter_Recovery = nil
        os.shutdown()
      elseif selector == 3 then --Update
        term.setBackgroundColor(colors.white)
        term.setTextColor(colors.red)
        term.clear()
        term.setCursorPos(1,1)
        PrintCentered("/- Updating -/")

        PrintCentered("/- Complete -/")
        sleep(2)
        start()
      elseif selector == 4 then --Rollback
        term.setBackgroundColor(colors.white)
        term.setTextColor(colors.red)
        term.clear()
        term.setCursorPos(1,1)
          if fs.isDir("/Old/") == true then
            if fs.isDir("/Old/System/") == true then
              fs.copy("/Old/System/","/System/")
            else
              printError("/- ! /System/ could not be rolledback ! -/")
            end
            if fs.isDir("/Old/APIs/") == true then
              fs.copy("/Old/APIs/","/APIs/")
            else
              printError("/- ! /APIs/ could not be rolledback ! -/")
            end
            if fs.isDir("/Old/Configs/") == true then
              fs.copy("/Old/Configs/","/Configs/")
            else
              printError("/- ! /Configs/ could not be rolledback ! -/")
            end
            if fs.isDir("/Old/Programs/") == true then
              fs.copy("/Old/Programs/","/Programs/")
            else
              printError("/- ! /Programs/ could not be rolledback ! -/")
            end
          else
            print("/- ! /Old/ could not be found ! -/")
            print("/- ! No files to rollback too, sorry ! -/")
          end
          sleep(2)
          start()
      elseif selector == 5 then
        term.setBackgroundColor(colors.white)
        term.setTextColor(colors.red)
        term.clear()
        term.setCursorPos(1,1)
        l = 10
        local c = "" -- Start string
        for i = 1, l do
          c = c .. string.char(math.random(33, 126))
        end
        print()
        stc(colors.red)
        print("- This will delete ALL data on this computer -")
        print("- Please type the 10 character code below to comfirm -")
        print(c)
        print()
        local cc = read()
        if cc == c then
          print("/- Good bye -/")
          for _,file in ipairs(fs.list("/")) do
            if not fs.isReadOnly(file) then
              fs.delete(file)
              print("Deleting "..file)
            end
          end
        else
        print("- Code did not match -")
        print("- Returning -")
        sleep(2)
        start()
        end
      end
    end
  end
end
end

start()
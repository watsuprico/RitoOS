--[[ 

     _________________________________________________________________________
    |                                                                         |
    |                              RitoOS - ^.^                               |
    |                                                                         |
    | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
    |                                                                         |
    |                         Recovery Version 3.0                            |
    |                                                                         |
    |  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  |
    |                                                                         |
    |   Thank you for looking at RitoOS, (or downloading it), it means alot.  |
    |    If you would like to learn more, head on over to the Github page:    |
    |              https://www.github.com/Watsuprico/RitoOS/                  |
    |                                                                         |
    |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -|
   _|                                                                         |
  |             Some extended info on copying and using RitoOS                |______________________________________________________ 
  |                                                                                                                                 |
  | Permission is hereby granted, free of charge, to any person obtaining a copy of this software and                               |
  | associated documentation files (the "Software"), to deal in the Software without restriction,                                   |
  | including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,                           |
  | copies of the Software, and to permit persons to whom the Software is furnished to do so,                                       |
  | subject to the following conditions:                                                                                            |
  |                                                                                                                                 |
  | -The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. |
  | -Visible credit is given to the original author.                                                                                |
  | -The software is distributed in a non-profit way.                                                                               |
  |                                                                                                                                 |
  | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE            |
  | WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR           |
  | COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,     |
  | ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                           |
  |                                                                                                                                 |
  |_________________________________________________________________________________________________________________________________|


]]

if not RitoOS then
  os.loadAPI("/System/APIs/System/System")
  if os.uptime() == nil then
    function os.uptime()
      return "Uptime service not running"
    end
  end
end

if SystemBootIntoRecovery ~= true then
  error("You have to boot into the recovery platform to use it.\n Use the command: ' pwr /br ' , or even ' pwr /rr '")
end


--Colors
local function updateColors(bw)
  if bw == true then
    System.logWarn("Recovery Color Manager","Running in black and white mode.")
    orange = colors.lightGray
    magenta = colors.white
    lightBlue = colors.white
    yellow = colors.white
    lightGreen = colors.lightGray
    pink = colors.lightGray
    gray = colors.gray
    lightGray = colors.lightGray
    cyan = colors.gray
    purple = colors.gray
    blue = colors.gray
    brown = colors.black
    green = colors.gray
    red = colors.black
    white = colors.white
    black = colors.black
  else
    System.logInfo("Recovery","Running in colored mode.")
    white = colors.white
    orange = colors.orange
    magenta = colors.magenta
    lightBlue = colors.lightBlue
    yellow = colors.yellow
    lightGreen = colors.lime
    pink = colors.pink
    gray = colors.gray
    lightGray = colors.lightGray
    cyan = colors.cyan
    purple = colors.purple
    blue = colors.blue
    brown = colors.brown
    green = colors.green
    red = colors.red
    black = colors.black
  end
end


function printCentered(msg)
    local w, h = term.getSize()
    local x, y = term.getCursorPos()
    term.setCursorPos(math.floor(w-string.len(msg)+2)/2,y)
    print(msg)
end

local function recovMessage()
  term.setCursorPos(1,1)
  term.setBackgroundColor(lightBlue)
  term.clear()
  term.setBackgroundColor(gray)
  term.clearLine()
  print()
  term.clearLine()
  term.setTextColor(white)
  printCentered("RitoOS Recovery")
  term.clearLine()
  print()
  term.setBackgroundColor(lightBlue)
  term.setTextColor(white)
  print()
  print()
  -- Goes down 5 lines
end

function error(err)
  recovMessage()
  printCentered("An error has occured!")
  printCentered("Please wait while recovery restarts...")
  print()
  printCentered("Press C to cancel.")
  parallel.waitForAny(function()
    local event, key = os.pullEvent("key")
    if key == keys.c then
      ccexit = true
      return false
    end
  end, function()
    sleep(2)
  end)

  if ccexit then
    shell.run("/System/.Recovery/.Recover")
    print("Rebooting...")
    sleep(1)
  end

  RitoOS_bootIntoRecovery = true
  os.reboot(0.1, true)
end

if term.isColor() == false then
  updateColors(true)
else
  updateColors(false)
end

local function getTable(path)
  if fs.exists(path) then
    local file = io.open(path, "r")
    local lines = {}
    local i = 1
    local line = file:read("*l")
    while line ~= nil do
      lines[i] = line
      line = file:read("*l")
      i = i + 1
    end
    file:close()
    return lines
  end
  return {}
end

local function getSavedPass(getKey, username) -- I'm take this from CodeX if you don't mind
  if not username then
    username = CodeX_Username
  end
  local Key = StrUtils.SHA1(getKey)
  local getKey = "Nope.avi"
  local Passphrase_File = fs.open("/Users/"..username.."/.Passphrase.CodeX","r")
  local Passphrase_Key = Passphrase_File.readAll()
  Passphrase_File.close()
  local UnsavedPassword = StrUtils.SHA1(Key..""..Passphrase_Key)
  local Passphrase_Key = "Nope.avi"
  local Passphrase_File = "Nope.avi"
  return UnsavedPassword
end

local function Login()
  loggedIn = false
  term.setTextColor(black)
  parallel.waitForAny(function()
    while true do
      local event, key = os.pullEvent("key")
      if key == 1 then
        local bexit = true
        break
      end
    end -- End while loop
    if bexit then
      return false
    end
  end, function()
    os.loadAPI("/System/APIs/StrUtils/StrUtils")
    print("Please log in.")
    term.setCursorPos(1,8)
    print("Username-]")
    term.setCursorPos(12,8)
    local username = read()
    if fs.exists("/Users/"..username.."/."..username..".CodeX") then
      System.logInfo("Recovery","Logging in for user: \""..username.."\"")
      print("Password-]")
      term.setCursorPos(12,9)
      local wizardpass = read("*")
      local morewizards = getSavedPass(wizardpass, username)
      local userfile =  getTable("/Users/"..username.."/."..username..".CodeX")
      local lesswizards = string.sub(userfile[1],string.find(userfile[1],"!")+1)
      if morewizards == lesswizards then
        print("Loading ...")
        System.logInfo("Recovery","User logged in.")
        loggedIn = true
      else
        print('Password incorrect ):')
        System.logWarn("Recovery","Attempt to login failed. BADPASS2")
        sleep(2)
      end
    else
      print('Password incorrect ):')
      System.logWarn("Recovery","Attempt to login failed. BADPASS1")
      sleep(2)
    end -- If exists
  end) -- Parallel

  return loggedIn
end

local function format()
  l = 10
  local a = ""
  for i = 1, l do
    a = a .. string.char(math.random(33,126))
  end
  print()
  term.setTextColor(red)
  printCentered("This will delete everything on your disk!")
  printCentered("Please type the "..tostring(l).." character code below.")
  print(a)
  print()
  local cc = io.read()
  if cc == a then
    System.logAlert("Recovery","Formatting the system...")
    print("\\\\ ..Formatting.. //")
    for _,file in ipairs(fs.list("/")) do
      if not fs.isReadOnly(file) and file ~= "/System/Latest.log" then
        fs.delete(file)
        print("Deleting: \""..file.."\"")
      end
    end
    print("Complete!")
    sleep(2)

    local nativeShutdown = os.shutdown
    function os.shutdown()
      nativeShutdown()
      while true do
          coroutine.yield()
      end
    end
    local nativeReboot = os.reboot
    function os.reboot()
      nativeReboot()
      while true do
        coroutine.yield()
      end
    end
  else
    System.logInfo("Recovery","Failed to confirm format code.")
    print("Your enter code does not match the original code.")
    sleep(2)
  end
end

local function moveCheck(mNum,minNum)
  exit = false
  ps = false
  parallel.waitForAny(function()
      local event, scrollDirection, x, y = os.pullEvent("mouse_scroll")
      if scrollDirection == -1 then
        if cs > minNum then
          cs = cs - 1
        else
          cs = mNum
        end
      elseif scrollDirection == 1 then
        if cs > mNum - 1 then
          cs = minNum
        else
          cs = cs + 1
        end
      end

      end, function()
      local event, key = os.pullEvent("key")
      if key == keys.up then
        if cs > minNum then
          cs = cs - 1
        else
          cs = mNum
        end
      elseif key == keys.down then
        if cs > mNum - 1 then
          cs = minNum
        else
          cs = cs + 1
        end
      elseif key == keys.enter then
        ps = true
      elseif key == 1 then
        exit = true
      end
    end)
  return ps, cs, exit
end

local function clearChoice(y)
  term.setCursorPos(1,y)
  term.setBackgroundColor(blue)
  term.setTextColor(black)
  term.clearLine()
end

local function Troubleshoot()
  recovMessage()
  term.setCursorPos(1,6)
  if not Log then
    local Log = Login()
    if not Log then
      return false
    end
  end

  recovMessage()
  term.setCursorPos(1,6)
  ps = false
  cs = 0
  while true do

    term.setBackgroundColor(lightBlue)
    term.setTextColor(black)
    term.setCursorPos(1,6)
    term.clearLine()
    printCentered("[   Command  Prompt   ]")--6
    term.clearLine()
    printCentered("[ Update  The  System ]")--7
    term.clearLine()
    printCentered("[   System  Restore   ]")--8
    term.clearLine()
    printCentered("[  Automatic  Repair  ]")--9
    term.clearLine()
    printCentered("[ Format System Drive ]")--10

    if cs == 0 then
    elseif cs == 1 then
      clearChoice(6)
      printCentered(">   Command  Prompt   <")--6
    elseif cs == 2 then
      clearChoice(7)
      printCentered("> Update  The  System <")--7
    elseif cs == 3 then
      clearChoice(8)
      printCentered(">   System  Restore   <")--8
    elseif cs == 4 then
      clearChoice(9)
      printCentered(">  Automatic  Repair  <")--9
    elseif cs == 5 then
      clearChoice(10)
      printCentered("> Format System Drive <")--10
    end
    local ps, cs, back = moveCheck(5,1,cs)
    if back then
      break
    end
    if ps then
      if cs == 1 then
        System.logInfo("Recovery","Opening a command prompt.")
        dofile("/System/CMD.rxf")
        recovMessage()
        sleep(1)
      elseif cs == 2 then
        System.logInfo("Recovery","Running system updater.")
        dofile("/System/Programs/update")
        recovMessage()
        sleep(1)
      elseif cs == 3 then
        System.logInfo("Recovery","Running system restore tool.")
        dofile("/System/.Recovery/.Restore")
        recovMessage()
        sleep(1)
      elseif cs == 4 then
        System.logInfo("Recovery","Running repair tool.")
        dofile("/System/.Recovery/.Repair")
        recovMessage()
        sleep(1)
      elseif cs == 5 then
        System.logWarn("Recovery","Formatting system drive.")
        recovMessage()
        format()
        recovMessage()
        sleep(1)
      end
    end
  end -- End while
end

local function Recovery()
  if runRitoOS_RecovScript then
    System.logInfo("Recovery","Running System recovery script.")
    local recovFile = fs.open("/System/.Recovery/recoveryScript.arg", "r")
    System.logInfo("RitoOS Recovery Script","Recov script: "..recovFile:readAll())
    recovFile:close()
    term.setBackgroundColor(white)
    term.setTextColor(white)
    term.clear()
    term.setBackgroundColor(black)
    term.setCursorPos(1,1)
    term.clearLine()
    printCentered("RitoOS Recovery Script")
    term.setCursorPos(1,3)
    term.setBackgroundColor(white)
    term.setTextColor(black)
    parallel.waitForAll(function() dofile("/System/.Recovery/recoveryScript.arg") end, function() sleep(0.2) if fs.exists("/System/.Recovery/recpveryScript.arg") then fs.delete('/System/.Recovery/recoveryScript.arg') end end)
    sleep(2)
    term.setBackgroundColor(black)
    term.setTextColor(white)
    term.clear()
    term.setCursorPos(1,1)
    print("Rebooting...")
    sleep(1)
    os.reboot(0,true)
  end

  recovMessage()
  term.setCursorPos(1,6)
  ps = false
  cs = 0
  while true do

    term.setBackgroundColor(lightBlue)
    term.setTextColor(black)
    term.setCursorPos(1,6)
    term.clearLine()
    printCentered("[ Boot  RitoOS ]")--6
    term.clearLine()
    printCentered("[ Troubleshoot ]")--7
    term.clearLine()
    printCentered("[   Shutdown   ]")--8

    if cs == 0 then
    elseif cs == 1 then
      term.setCursorPos(1,6)
      term.setBackgroundColor(blue)
      term.setTextColor(black)
      term.clearLine()
      printCentered("> Boot  RitoOS <")
    elseif cs == 2 then
      term.setCursorPos(1,7)
      term.setBackgroundColor(blue)
      term.setTextColor(black)
      term.clearLine()
      printCentered("> Troubleshoot <")--7
    elseif cs == 3 then
      term.setCursorPos(1,8)
      term.setBackgroundColor(blue)
      term.setTextColor(black)
      term.clearLine()
      printCentered(">   Shutdown   <")--8
    end
    local ps, cs, back = moveCheck(3,1)

    if back then
      break
    end

    if ps then
      if cs == 1 then
        System.logInfo("Recovery","Booting into RitoOS")
        if fs.exists("/System/.Boot/BN") then
          fs.delete("/System/.Boot/BN")
        end
        RitoOS_bootIntoRecovery = false
        os.reboot(0.1, true)
      elseif cs == 2 then
        Troubleshoot()
        Recovery()
      elseif cs == 3 then
        System.logInfo("Recovery","System shutting down.")
        RitoOS_bootIntoRecovery = true
        os.shutdown(0.1, true)
      end
    end
  end -- End while

  System.logInfo("Recovery","System shutting down.")
  RitoOS_bootIntoRecovery = true
  os.shutdown(0.1, true)

end

System.logInfo("Recovery","Loaded.")
Recovery()
local function PrintCentered(sText)
msgLen = string.len(sText)
screenWidth,_ = term.getSize()
_xCoords = tonumber(math.ceil((screenWidth / 2) - (msgLen / 2)))
_,termY = term.getCursorPos()
term.setCursorPos(_xCoords,termY)
print(sText)
end
function os.pullEvent( sFilter )
    local eventData = { os.pullEventRaw( sFilter ) }
    if eventData[1] == "terminate" then
        os.reboot()
    end
    return unpack( eventData )
end
function sr(id, e)
	if e == nil then
		e = "-|none|-"
	end
	if shell.getRunningProgram() == "System/CodeX.rxf" then
        r = "CodeX"
    else
        r = shell.getRunningProgram()
    end
	printError("| - RitoOS has stopped responding - |")
	printError("| - Code: RXF-0-"..r.."-"..id.." - |")
	printError("| - Possible cause: "..e.." - |")
	printError("| - Please, press any key to reboot - |")
	sleep(1)
	os.pullEvent("key")
	os.reboot()
end
local function fwrite(path, text)
        local file = assert(io.open(path, "w"))
        file:write(text)
        file:close()
end
local function writeFromTable(path, t)
	local text = ""
	for _, line in pairs(t) do
		text = text..lin.."\n"
	end
	fwrite(path, text)
end
local function getTable(path)
	if fs.exists(path) then
		local file = io.open(path, "r")
		local lines = {}
		local i = 1
		local line = file:read("*l")
		while line ~= nil do
			lines[i] = line
			line = file:read("*l")
			i = i + 1
		end
		file:close()
		return lines
	end
	return {}
end
local function replaceLine(path, n, text)
	local lines = getTable(path)
	lines[n] = text
	writeFromTable(path, lines)
end
local function append(path, text)
	local file = assert(io.open(path, "a"))
	file:write(text.."\n")
	file:close()
end

local function stc(c) --Help save space...
	term.setTextColor(c)
end
local function c()
	term.clear()
end
local function sbc(c)
	term.setBackgroundColor(c)
end
local function scp(x,y)
	term.setCursorPos(x,y)
end

local function ecrashed()
sleep(1)
if CodeX_Crash_Number_ == nil then
	CodeX_Crash_Number_ = 0
end
if CodeX_Crash_Number_ >= 3 then
	print("Explorera crashed more than 3 times,\nthus CMD will be started")
	sleep(1)
	shell.run("/System/CMD.rxf")
end
CodeX_Crash_Number_ = CodeX_Crash_Number_ + 1
shell.run("/System/CodeX.rxf")
ecrashed()
sr("000")
end -- End ecrashed

function CodeX_logout()
	CodeX_Username = nil
	CodeX_Logname = nil
	CodeX_HasUserLogged = nil
	CodeX_USR_PASSCODE_ = nil
end

function CodeX_Delete_User()
	stc(CodeX_Prompt_Color)
	c()
	scp(1,1)
	term.clearLine()
	PrintCentered("Deleting user: "..CodeX_Username)
	PrintCentered("Please confirm your password.")
	scp(1,5)
	term.clearLine()
	print("Password: ")
	scp(11,5)
	stc(CodeX_Input_Color)
	local MultiKey = read("*")
	local Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
	local Password = StrUtils.SHA1("."..Key.." ")
	local Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
    local _checkCode_ = fs.open("/Users/"..CodeX_Logname.."/.Passphrase.codex", "r")
    local Key_ = _checkCode_.readAll()
    _checkCode_.close()
	local CheckCode = StrUtils.SHA1(Passcode..""..Key_)
	local MultiKey = "Om nom nom."
	local Key = "Om nom nom."
	local Password = "Om nom nom."
	local Passcode = "Om nom nom."
	local s = "Om nom nom."
	local Passphrase = "Om nom nom."
	local userfile =  getTable("/Users/"..CodeX_Logname.."/."..CodeX_Logname..".codex")
	local pass = string.sub(userfile[1],string.find(userfile[1],"!")+1)
	if pass == CheckCode then
		PrintCentered("/- Deleting account -/")
		fs.delete("/Users/"..CodeX_Username)
		PrintCentered("/- Logging out -/")
		CodeX_logout()
	else
		stc(CodeX_Error_Color)
		PrintCentered("/- Password incorrect! -/")
		PrintCentered("/- Canceling -/")
		sleep(3)
		c()
	end
end
function CodeX_Change_Password()
	stc(CodeX_Prompt_Color)
	c()
	scp(1,1)
	term.clearLine()
	PrintCentered("Changing password for: "..CodeX_Username)
	PrintCentered("Please confirm your password.")
	scp(1,5)
	term.clearLine()
	print("Password: ")
	scp(11,5)
	stc(CodeX_Input_Color)
	local MultiKey = read("*")
	local Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
	local Password = StrUtils.SHA1("."..Key.." ")
	local Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
    local _checkCode_ = fs.open("/Users/"..CodeX_Logname.."/.Passphrase.codex", "r")
    local Key_ = _checkCode_.readAll()
    _checkCode_.close()
	local CheckCode = StrUtils.SHA1(Passcode..""..Key_)
	local MultiKey = "Om nom nom."
	local Key = "Om nom nom."
	local Password = "Om nom nom."
	local Passcode = "Om nom nom."
	local s = "Om nom nom."
	local Passphrase = "Om nom nom."
	local userfile =  getTable("/Users/"..CodeX_Logname.."/."..CodeX_Logname..".codex")
	local pass = string.sub(userfile[1],string.find(userfile[1],"!")+1)
	if pass == CheckCode then
		c()
		scp(1,1)
		stc(CodeX_Prompt_Color)
		PrintCentered("Please, enter a new password.")
		stc(CodeX_Input_Color)
		local CheckPassword = read("*")
		stc(CodeX_Prompt_Color)
		PrintCentered("Please, re-enter that password.")
		stc(CodeX_Input_Color)
		local CheckPassword2 = read("*")
		if CheckPassword == CheckPassword2 then
			if CodeX_Register_Key_Length == nil then
            	CodeX_Register_Key_Length = 3750
        	end
        	local s = "" -- Start string
        	for i = 1, CodeX_Register_Key_Length do
            	    s = s .. string.char(math.random(32, 126)) -- Generate random number from 32 to 126, turn it into character and add to string
        	end
        	local file = assert(io.open("/Users/"..CodeX_Username.."/.Passphrase.codex", "w"))
        	file:write(s)
        	file:close()
            MultiKey = CheckPassword
			Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
			Password = StrUtils.SHA1("."..Key.." ")
			Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
        	_checkCode_ = fs.open("/Users/"..CodeX_Username.."/.Passphrase.codex", "r")
            Key_ = _checkCode_.readAll()
            _checkCode_.close()
			CheckCode = StrUtils.SHA1(Passcode..""..Key_)
			--Verifi
			MultiKey1 = CheckPassword
			Key1 = StrUtils.SHA1(MultiKey1) -- Look mom! I can encrypt!
			Password1 = StrUtils.SHA1("."..Key1.." ")
			Passcode1 = StrUtils.SHA1(" "..Password1..".") -- Many ways...
        	_checkCode_1 = fs.open("/Users/"..CodeX_Username.."/.Passphrase.codex", "r")
            Key_1 = _checkCode_1.readAll()
            _checkCode_1.close()
			CheckCode1 = StrUtils.SHA1(Passcode1..""..Key_1)
			if CheckCode == CheckCode1 then
            	fwrite("/Users/"..CodeX_Username.."/."..CodeX_Username..".codex", "!"..CheckCode)
            	fwrite("/Users/.CodeXUserCreated","")
            	PrintCentered("Complete!")
            	MultiKey = "Oh nom nom."
            	Key = "Oh nom nom."
            	Password = "Oh nom nom."
            	Passcode = "Oh nom nom."
            	_checkCode_ = "Oh nom nom."
            	Key_ = "Oh nom nom."
            	CheckCode = "Oh nom nom."
            	Key1 = "Oh nom nom."
            	Password1 = "Oh nom nom."
            	Passcode1 = "Oh nom nom."
            	_checkCode_1 = "Oh nom nom."
            	Key_1 = "Oh nom nom."
            	CheckCode1 = "Oh nom nom."
            else
            	stc(CodeX_Error_Color)
            	PrintCentered("Uhoh! Something went wrong! Didn't update!")
            end
        else
        	stc(CodeX_Error_Color)
        	PrintCentered("Two passwords didn't match! Didn't save.")
        end
	else
		stc(CodeX_Error_Color)
		scp(1,5)
		term.clearLine()
		print("Password incorrect!")
		sleep(3)
		c()
	end
end

function CodeX_Create_Newuser()
	if CodeX_USR_ADMIN == "true" then
		scp(1,1)
    	sbc(colors.white)
	    c()
    	stc(colors.black)
    	PrintCentered("Please confirm your password.")
		scp(1,5)
		term.clearLine()
		print("Password: ")
		scp(11,5)
		local MultiKey = read("*")
		local Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
		local Password = StrUtils.SHA1("."..Key.." ")
		local Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
	    local _checkCode_ = fs.open("/Users/"..CodeX_Logname.."/.Passphrase.codex", "r")
    	local Key_ = _checkCode_.readAll()
	    _checkCode_.close()
		local CheckCode = StrUtils.SHA1(Passcode..""..Key_)
		local MultiKey = "Om nom nom."
		local Key = "Om nom nom."
		local Password = "Om nom nom."
		local Passcode = "Om nom nom."
		local s = "Om nom nom."
		local Passphrase = "Om nom nom."
		local userfile =  getTable("/Users/"..CodeX_Logname.."/."..CodeX_Logname..".codex")
		local pass = string.sub(userfile[1],string.find(userfile[1],"!")+1)
		if pass == CheckCode then
			c()
		    PrintCentered("Please, type the new user's username.")
	    	PrintCentered("E.X. "..CodeX_Username)
		    local Logname = read()
    		print()
		    local function RegisterPassword()
    		    local function fwrite(path, text)
        		    local file = assert(io.open(path, "w"))
	        	    file:write(text)
            		file:close()
	        	end
    		    c()
	    	    scp(1,1)
        		PrintCentered("Please, type the new user's password.")
	    	    local _Passcode = read("*")
		        PrintCentered("Please, re-type that password.")
        		local _CheckCode = read("#")
        		if _CheckCode == _Passcode then
        			PrintCentered("Should this user be a admin?")
        			PrintCentered("Type 'true' for yes, and 'false' for no.")
        			local newuseradmin = read()
        			if newuseradmin == true then
        				newuseradmin = "true"
        			else
        				newuseradmin = "false"
        			end
		            PrintCentered("Creating user")
        	    	if CodeX_Register_Key_Length == nil then
        		    	CodeX_Register_Key_Length = 200
    	    		end
		        	local s = "" -- Start string
    	    		for i = 1, CodeX_Register_Key_Length do
        		    	    s = s .. string.char(math.random(32, 126)) -- Generate random number from 32 to 126, turn it into character and add to string
    	    		end
	        		fwrite("/Users/"..Logname.."/.Passphrase.codex",s)
	            	local MultiKey = _Passcode
					local Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
					local Password = StrUtils.SHA1("."..Key.." ")
					local Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
        			local _checkCode_ = fs.open("/Users/"..Logname.."/.Passphrase.codex", "r")
	        	    local Key_ = _checkCode_.readAll()
    		        _checkCode_.close()
					local CheckCode = StrUtils.SHA1(Passcode..""..Key_)
					--Verifi
					local MultiKey1 = _CheckCode
					local Key1 = StrUtils.SHA1(MultiKey1) -- Look mom! I can encrypt!
					local Password1 = StrUtils.SHA1("."..Key1.." ")
					local Passcode1 = StrUtils.SHA1(" "..Password1..".") -- Many ways...
        			local _checkCode_1 = fs.open("/Users/"..Logname.."/.Passphrase.codex", "r")
    	        	local Key_1 = _checkCode_1.readAll()
	    	        _checkCode_1.close()
					local CheckCode1 = StrUtils.SHA1(Passcode1..""..Key_1)
					if CheckCode == CheckCode1 then
						PrintCentered("Keys match, saving.")
    	        		fwrite("/Users/"..Logname.."/."..Logname..".codex", "!"..CheckCode.."\n!"..newuseradmin)
	            		fwrite("/Users/.C","")
            			PrintCentered("Complete!")
        	    		sleep(1)
    	    		else
	    	    		printError("Could not verifi! User not created!")
	        			sleep(5)
        			end
        		else
    	    	    PrintCentered("Passwords do not match!")
	    	        sleep(2)
    	        	RegisterPassword()
	        	end --End check password
	    	end -- Close Pass function.
    		RegisterPassword()
    		sleep(3)
		else
		stc(CodeX_Error_Color)
		scp(1,5)
		term.clearLine()
		print("Password incorrect!")
		sleep(3)
		end
	end
end

--Auth check, user already logged in?
if CodeX_Logname ~= nil then
	if CodeX_HasUserLogged ~= nil then
		if CodeX_HasUserLogged == StrUtils.SHA1(CodeX_Logname) then
			print("Verifing password.")
			local userfile =  getTable("/Users/"..CodeX_Logname.."/."..CodeX_Logname..".codex")
	    	local Pass = string.sub(userfile[1],string.find(userfile[1],"!")+1)
			if CodeX_USR_PASSCODE_ == Pass then
				print("User logged in.")
				shell.run("/System/Explorera.rxf")
				ecrashed()
			else
				print("Password not correct.")
			end
		else
			print("Values set, but incorrectly.")
		end
	else
		print("Names set, that's it, could not verifi")
	end
else
end
if fs.exists("/Users/.C") == false then
    os.loadAPI("/System/APIs/StrUtils/StrUtils")
    scp(1,1)
    sbc(colors.white)
    c()
    stc(colors.black)
    PrintCentered("Please type a login name.")
    PrintCentered("(This is the username of the user,")
    PrintCentered(" and is how you login)")
    PrintCentered("E.X. Watsuprico")
    local Logname = read()
    print()
    local function RegisterPassword()
        local function fwrite(path, text)
            local file = assert(io.open(path, "w"))
            file:write(text)
            file:close()
        end
        c()
        scp(1,1)
        PrintCentered("Now, type your password.")
        local _Passcode = read("*")
        PrintCentered("Please, re-type that password.")
        local _CheckCode = read("#")
        if _CheckCode == _Passcode then
            PrintCentered("Passwords match!")
            PrintCentered("Saving your profile . . .")
            if CodeX_Register_Key_Length == nil then
            	CodeX_Register_Key_Length = 200
        	end
        	local s = "" -- Start string
        	for i = 1, CodeX_Register_Key_Length do
            	    s = s .. string.char(math.random(32, 126)) -- Generate random number from 32 to 126, turn it into character and add to string
        	end
        	fwrite("/Users/"..Logname.."/.Passphrase.codex",s)
            local MultiKey = _Passcode
			local Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
			local Password = StrUtils.SHA1("."..Key.." ")
			local Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
        	local _checkCode_ = fs.open("/Users/"..Logname.."/.Passphrase.codex", "r")
            local Key_ = _checkCode_.readAll()
            _checkCode_.close()
			local CheckCode = StrUtils.SHA1(Passcode..""..Key_)
			--Verifi
			local MultiKey1 = _CheckCode
			local Key1 = StrUtils.SHA1(MultiKey1) -- Look mom! I can encrypt!
			local Password1 = StrUtils.SHA1("."..Key1.." ")
			local Passcode1 = StrUtils.SHA1(" "..Password1..".") -- Many ways...
        	local _checkCode_1 = fs.open("/Users/"..Logname.."/.Passphrase.codex", "r")
            local Key_1 = _checkCode_1.readAll()
            _checkCode_1.close()
			local CheckCode1 = StrUtils.SHA1(Passcode1..""..Key_1)
			if CheckCode == CheckCode1 then
            	fwrite("/Users/"..Logname.."/."..Logname..".codex", "!"..CheckCode.."\n!true")
            	fwrite("/Users/.C","")
            	PrintCentered("Complete!")
            	sleep(1)
        	else
        		printError("Could not verifi! User not created!")
        		sleep(5)
        	end
        else
            PrintCentered("Passwords do not match!")
            sleep(2)
            RegisterPassword()
        end --End check password

    end -- Close Pass function.
    RegisterPassword()
    print("Rebooting...")
    os.reboot()
else
local function start()
	CodeX_Started = true
	sbc(CodeX_Background_Color)
	c()
	stc(CodeX_Text_Color)
	scp(1,1)
	PrintCentered("CodeX 4.0")
	print()
	scp(1,4)
	stc(CodeX_Prompt_Color)
	print("Username: ")
	scp(11,4)
	stc(CodeX_Input_Color)
	local username = read()
	if fs.exists("/Users/"..username.."/."..username..".codex") == true then
		CodeX_Logname = username
		CodeX_Username = username
		stc(CodeX_Prompt_Color)
		scp(1,1)
		term.clearLine()
		PrintCentered("Logging into: "..CodeX_Username)
		scp(1,5)
		term.clearLine()
		print("Password: ")
		scp(11,5)
		stc(CodeX_Input_Color)
		local MultiKey = read("*")
		local Key = StrUtils.SHA1(MultiKey) -- Look mom! I can encrypt!
		local Password = StrUtils.SHA1("."..Key.." ")
		local Passcode = StrUtils.SHA1(" "..Password..".") -- Many ways...
	    local _checkCode_ = fs.open("/Users/"..CodeX_Logname.."/.Passphrase.codex", "r")
    	local Key_ = _checkCode_.readAll()
	    _checkCode_.close()
		local CheckCode = StrUtils.SHA1(Passcode..""..Key_)
		local MultiKey = "Om nom nom."
		local Key = "Om nom nom."
		local Password = "Om nom nom."
		local Passcode = "Om nom nom."
		local s = "Om nom nom."
		local Passphrase = "Om nom nom."
		local userfile =  getTable("/Users/"..CodeX_Logname.."/."..CodeX_Logname..".codex")
		local pass = string.sub(userfile[1],string.find(userfile[1],"!")+1)
		if pass == CheckCode then
			print("Password correct! Loading . . .")
			CodeX_HasUserLogged = StrUtils.SHA1(CodeX_Logname)
			CodeX_USR_PASSCODE_ = CheckCode
			CodeX_USR_ADMIN = string.sub(userfile[2],string.find(userfile[2],"!")+1)
    		HasUserLogged = "tajbn38wsna;3on4r00djsd0hj3n"
		    c()
		    print("Loading APIs in /APIs/")
		    for _,file in ipairs(fs.list("/APIs/")) do
            	if file ~= "read.txt" then
				    os.loadAPI("/APIs/"..file)
	            	print("Loaded /APIs/"..file)
	            end
          	end
    		shell.run("/System/Explorera.rxf")
    		ecrashed()
	    	sr("001")
		else
			stc(CodeX_Error_Color)
			scp(1,5)
			term.clearLine()
			print("Password incorrect!")
			sleep(1)
			start()
		end
		sr("002")
	else
		stc(CodeX_Error_Color)
		print("Unknown user.")
		sleep(0.7)
		start()
	end
passwordentry()
sr("003")
end --End start
sleep(0.1)
start()
sr("004")
end -- End function
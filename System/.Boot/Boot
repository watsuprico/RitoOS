--[[


                        _________
                       |_|_|_|_|_|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
      ___________________|__|__|___
     /                             \
    /     Rito OS, Created By:      \
   /          @Watsuprico            \
  /                                   \
 /                                     \
/                                       \
|_______________________________________|
|                                       |
|   _______                   _______   |
|  |   |   |                 |   |   |  |
|  |---|---|                 |---|---|  |
|  |___|___|                 |___|___|  |
|                                       |
|                                       |
|                                       |
|               _________               |
|              |         |              |
|              |  Rito   |              |
|              |         |              |
|              |       Ïƒ |              |
|              |         |              |
|______________|_________|______________|
]]--
cleanEnvironment = {}
for k, v in pairs(_G) do
    cleanEnvironment[k] = v
end
--Write functions
local function fwrite(path, text)
        local file = assert(io.open(path, "w"))
        file:write(text)
        file:close()
end
local function getTable(path)
    if fs.exists(path) then
        local file = io.open(path, "r")
        local lines = {}
        local i = 1
        local line = file:read("*l")
        while line ~= nil do
            lines[i] = line
            line = file:read("*l")
            i = i + 1
        end
        file:close()
        return lines
    end
    return {}
end
local function append(text, path)
    local file = assert(io.open(path, "a"))
    file:write(text.."\n")
    file:close()
end
--End

--Term functions
local function tsbc(c)
    term.setBackgroundColor(c)
end
local function tstc(c)
    term.setTextColor(c)
end
local function tscp(x,y)
    term.setCursorPos(x,y)
end
local function tc()
    term.clear()
end
--End

-- Vars
__RitoOS_CC_Version = os.version()
local mhf = ""
local mhb = ""
local ALERTCOLOR = 16384
local WARNCOLOR = 2
local INFOCOLOR = 8192
local ErrBGC = 32768
local __RitoOS_Version = "Beta build 2.0.1"
--End vars

--Error function
function sr(id, e)
    if e == nil then
        e = "-|none|-"
    end
    if shell.getRunningProgram() == "System/.Boot/Boot" then
        r = "RitoOS Boot"
    else
        r = shell.getRunningProgram()
    end
    printError("|-  RitoOS has stopped responding  -|")
    printError("|-  Code: RXF-0-"..r.."-"..id.."  -|")
    printError("|-  Possible cause: "..e.."  -|")
    printError("|-  Please, press any key to reboot  -|")
    sleep(1)
    os.pullEvent("key")
    os.reboot()
end
--End

function os.pullEvent( sFilter )
    local eventData = { os.pullEventRaw( sFilter ) }
    if eventData[1] == "terminate" then
        os.shutdown()
    end
    return unpack( eventData )
end

function __RitoOS_Boot__Monitor_Service_Started()
    __RitoOS_Monitor_service_started = true
end

-- OS functions
function __RitoOS_Global_Functions()
function os.ccversion()
    return __RitoOS_CC_Version
end
function os.version()
    return __RitoOS_Version
end
local nativeShutdown = os.shutdown
function os.shutdown()
    tsbc(colors.white)
    tc()
    tscp(1,1)
    system.outputAlert("Shutdown command issued")
    if __RitoOS_Main_Monitor then
        system.outputInfo("Disconnecting monitor.")
        __Monitor_Service_disconnect()
        system.outputInfo("Monitor disconnected.")
    end
    if __RitLock__Ran == true then
        if __RitLock___Save___Hash___Value_ ~= nil then
            tstc(colors.black)
            system.outputInfo("RitLock | Copying Backuped Files...")
                local function __RitLock__Delete_Files(l)
                    if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l) == true then
                        if fs.exists(l) == true then
                            fs.delete(l)
                        end
                        fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l,l)
                    end
                    system.outputAlert("RitLock | No file found")
                end
                local function __RitLock__Delete_Dirs(l)
                    if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l) == true then
                        if fs.isDir(l) == true then
                            fs.delete(l)
                        end
                        fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l,l)
                    end
                    system.outputAlert("RitLock | No dir found")
                end
            --Boot
            __RitLock__Delete_Files("/System/.Boot/Boot")
            --Recovery
            __RitLock__Delete_Dirs("/System/.Recovery")
            --CodeX
            __RitLock__Delete_Files("/System/CodeX.rxf")
            --Explorera
            __RitLock__Delete_Files("/System/Explorera.rxf")
            --CMD
            __RitLock__Delete_Files("/System/CMD.rxf")
            --User
            __RitLock__Delete_Files("/System/User.rxf")
            system.outputInfo("RitLock | Deleting some files...")
            if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_) == true then
                fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_)
            end
            system.outputInfo("RitLock | Finished")
        end
    end
    -- Updater
    print()
    system.outputInfo("Please wait, saving a few things")
    local StartupFile = assert(io.open("/Startup", "w"))
    StartupFile:write("LastShutdownSuccessful = '238N@Ne8jd#*nc'\nshell.run('/System/.Boot/Boot')")
    StartupFile:close()
    if __RitoOSUpdater__Reboot_To_Complete_Updates_Complete_Updates == true then
        append("__RitoOSUpdater__Reboot_To_Complete_Updates_Complete_Updates = true","/Startup")
    end
    --Recover
    if __RitoOS__Enter_Recovery == true then
        append("__RitoOS__Enter_Recovery = true", "/Startup")
    end
    --Remove bootnumber
    if fs.exists("/System/.Boot/BootNumber") then
        fs.delete("/System/.Boot/BootNumber")
    end
    system.outputInfo("Complete. Shuting down now.")
    tsbc(colors.lightGray)
    tc()
    sleep(0)
    tsbc(colors.gray)
    tc()
    sleep(0)
    tsbc(colors.black)
    tc()
    nativeShutdown()
    while true do
        coroutine.yield()
    end
end
local nativeReboot = os.reboot
function os.reboot()
    tsbc(colors.white)
    tc()
    tscp(1,1)
    system.outputAlert("Reboot command issued")
    if __RitoOS_Main_Monitor then
        system.outputInfo("Disconnecting monitor.")
        __Monitor_Service_disconnect()
        system.outputInfo("Monitor disconnected.")
    end
    if __RitLock__Ran == true then
        if __RitLock___Save___Hash___Value_ ~= nil then
            tstc(colors.black)
            system.outputInfo("RitLock | Copying Backuped Files...")
                local function __RitLock__Delete_Files(l)
                    if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l) == true then
                        if fs.exists(l) == true then
                            fs.delete(l)
                        end
                        fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l,l)
                    else
                        system.outputAlert("RitLock | No file found")
                    end
                end
                local function __RitLock__Delete_Dirs(l)
                    if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l) == true then
                        if fs.isDir(l) == true then
                            fs.delete(l)
                        end
                        fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files"..l,l)
                    else
                        system.outputAlert("RitLock | No dir found")
                    end
                end
            --Boot
            __RitLock__Delete_Files("/System/.Boot/Boot")
            --Recovery
            __RitLock__Delete_Dirs("/System/.Recovery")
            --CodeX
            __RitLock__Delete_Files("/System/CodeX.rxf")
            --Explorera
            __RitLock__Delete_Files("/System/Explorera.rxf")
            --CMD
            __RitLock__Delete_Files("/System/CMD.rxf")
            --User
            __RitLock__Delete_Files("/System/User.rxf")
            system.outputInfo("RitLock | Deleting some files...")
            if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_) == true then
                fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_)
            end
            system.outputInfo("RitLock | Finished")
        end
    end
    -- Updater
    print()
    system.outputInfo("Please wait, saving a few things.")
    local StartupFile = assert(io.open("/Startup", "w"))
    StartupFile:write("LastShutdownSuccessful = '238N@Ne8jd#*nc'\nshell.run('/System/.Boot/Boot')")
    StartupFile:close()
    if __RitoOSUpdater__Reboot_To_Complete_Updates_Complete_Updates == true then
        append("__RitoOSUpdater__Reboot_To_Complete_Updates_Complete_Updates = true","/Startup")
    end
    --Recover
    if __RitoOS__Enter_Recovery == true then
        append("__RitoOS__Enter_Recovery = true", "/Startup")
    end
    --Remove bootnumber
    if fs.exists("/System/.Boot/BootNumber") then
        fs.delete("/System/.Boot/BootNumber")
    end
    system.outputInfo("Complete. Rebooting now.")
    tstc(colors.white)
    tsbc(colors.lightGray)
    tc()
    sleep(0)
    tsbc(colors.gray)
    tc()
    sleep(0)
    tsbc(colors.black)
    tc()
    nativeReboot()
    while true do
        coroutine.yield()
    end
end
end --Function
--end



-- Functions
local function PrintCentered(m)
    if m == nil then
        m = ""
    end
    local _mL = string.len(m)
    local _scw,_ = term.getSize()
    local _xC = tonumber(math.ceil((_scw / 2) - (_mL / 2)))
    local _,tY = term.getCursorPos()
    term.setCursorPos(_xC,tY)
    print(m)
end -- End function

--Config
local function __Config_Service()
    __Bootfunction = "Config Service"
    if fs.exists("/System/Configs/.Rito.conf") then
        system.outputInfo("Config service started")
        __RitoOS_Config_service_started = true
    else
        system.outputAlert("Could not start config service")
        system.outputAlert("No config file")
        system.outputAlert("Sending reboot command")
        sleep(5)
        __RitoOS__Enter_Recovery = true
        os.reboot()
    end
    while true do -- Load configs
        if fs.exists("/System/Configs/.Rito.conf") then
            __RitoOS_Config =  getTable("/System/Configs/.Rito.conf")
            __RitoOS_crash_Action = string.sub(__RitoOS_Config[2],string.find(__RitoOS_Config[2],":")+2)
            __RitoOS_Text_Color = string.sub(__RitoOS_Config[3],string.find(__RitoOS_Config[3],":")+2)
            __RitoOS_Background_Color = string.sub(__RitoOS_Config[4],string.find(__RitoOS_Config[4],":")+2)
            __RitoOS_Error_Background_Color = string.sub(__RitoOS_Config[5],string.find(__RitoOS_Config[5],":")+2)
            __RitoOS_Error_Text_Color = string.sub(__RitoOS_Config[6],string.find(__RitoOS_Config[6],":")+2)
            __RitoOS_Version = string.sub(__RitoOS_Config[7],string.find(__RitoOS_Config[7],":")+2)
            __RitoOS_Computer_Label = string.sub(__RitoOS_Config[8],string.find(__RitoOS_Config[8],":")+2)
            __RitLock__Enabled = string.sub(__RitoOS_Config[9],string.find(__RitoOS_Config[9],":")+2)
            __RitoOS_Monitor_Service_New_Connection_Action = tonumber(string.sub(__RitoOS_Config[13],string.find(__RitoOS_Config[13],":")+2))
            __RitoOS_Monitor_Service_Monitor_Scale = tonumber(string.sub(__RitoOS_Config[14],string.find(__RitoOS_Config[14],":")+2))
            __RitoOSUpdater__Enable_Betas = string.sub(__RitoOS_Config[21],string.find(__RitoOS_Config[21],":")+2)
            __CodeX_Text_Color = tonumber(string.sub(__RitoOS_Config[26],string.find(__RitoOS_Config[26],":")+2))
            __CodeX_Background_Color = tonumber(string.sub(__RitoOS_Config[27],string.find(__RitoOS_Config[27],":")+2))
            __CodeX_Prompt_Color = tonumber(string.sub(__RitoOS_Config[28],string.find(__RitoOS_Config[28],":")+2))
            __CodeX_Input_Color = tonumber(string.sub(__RitoOS_Config[29],string.find(__RitoOS_Config[29],":")+2))
            __CodeX_Error_Color = tonumber(string.sub(__RitoOS_Config[30],string.find(__RitoOS_Config[30],":")+2))
            __CodeX_Register_Key_Length = tonumber(string.sub(__RitoOS_Config[31],string.find(__RitoOS_Config[31],":")+2))
        else
            system.outputAlert("Config file not found")
            system.outputAlert("Sending reboot command")
            sleep(5)
            __RitoOS__Enter_Recovery = true
            os.reboot()
        end
        sleep(1)
    end
end
--End

local function __Boot2()
    __Bootfunction = "RitoOS"
    system.outputInfo("Setting Computer Label")
    os.setComputerLabel(__RitoOS_Computer_Label)
    system.outputInfo("RitoOS loaded, starting CodeX")
    __Bootfunction = "CodeX"
    system.outputInfo("Creating window")
    local X,Y = term.getSize()
    _CodeX_Main_Window = window.create(_RitoOS_Main_Window,1,1,X,Y,true)
    system.outputInfo("Attempting to redirect to the CodeX window")
    term.redirect(_CodeX_Main_Window)
    system.outputInfo("Redirect established")
    system.outputInfo("Loading CodeX")
    tsbc(colors.black)
    tc()
    sleep(0)
    tsbc(colors.gray)
    tc()
    sleep(0)
    tsbc(colors.lightGray)
    tc()
    sleep(0)
    tsbc(colors.white)
    tc()
    __RitoOS_Boot_Complete = true
    tscp(1,1)
    shell.run("/System/CodeX.rxf")
end

function __Boot1()
__Bootfunction = "RitoOS"
system.outputInfo("Checking last boot info","RitoOS")
if LastShutdownSuccessful ~= "238N@Ne8jd#*nc" then
    system.outputAlert("RitoOS did not shutdown correctly","RitoOS shutdown state")
    if fs.exists("/System/.Boot/BootNumber") == true then
        BootNumber =  getTable("/System/.Boot/BootNumber")
        BootNumberi = tonumber(string.sub(BootNumber[1],string.find(BootNumber[1],"!")+1))
        if BootNumberi >= 2 then
            system.outputAlert("System failed to shutdown correcly 3 times","RitoOS shutdown state")
            system.outputAlert("Booting into recovery mode","RitoOS shutdown state")
            __RitoOS__Enter_Recovery = true
        else
            BootNumberi = BootNumberi + 1
            fwrite("/System/.Boot/BootNumber","!"..BootNumberi)
        end
    else
        fwrite("/System/.Boot/BootNumber","!1")
    end
end
if __RitoOS__Enter_Recovery == true then
    system.outputWarn("Entering recovery mode","RitoOS recovery")
    shell.run("/System/.Recovery/.Recover")
    sr("BOOT1-01","OS (recovery) return")
end
local a = fs.open("/Startup", "w")
a.write("shell.run('/System/.Boot/Boot')")
a.close()
system.outputInfo("Loading StrUtils API","RitoOS API loader")
os.loadAPI("/System/APIs/StrUtils/StrUtils")
system.outputInfo("Complete","RitoOS API loader")
system.outputInfo("Checking","RitLock")
    if fs.exists("/System/.RitLock/.RitLockHash") == true then
        local RitLockHash =  getTable("/System/.RitLock/.RitLockHash")
        local HashValue = string.sub(RitLockHash[1],string.find(RitLockHash[1]," ")+1)
        local Hash = StrUtils.decrypt(HashValue,"299384")
        if fs.isDir("/.RitLock"..Hash) == true then
            fs.delete("/.RitLock"..Hash)
        end
        fs.delete("/System/.RitLock/.RitLockHash")
    end
system.outputInfo("Checked","RitLock")
system.outputInfo("Starting services","ServiceMan")
    function __Config_Service_Start_()
        shell.run("/System/Services/Config/Config.serv")
    end
    function __Monitor_Service_Start_()
        shell.run("/System/Services/Monitor/Monitor.serv")
    end
    function __Update_Service_Start_()
        shell.run("/System/Services/Update/Update.serv")
    end
    function __RitLock_Service_Start_( ... )
        shell.run("/System/Services/RitLock/RitLock.serv")
    end
    function __StartSer1()
        parallel.waitForAll(__RitLock_Service_Start_,__Boot2)
    end
    function __StartSer2()
        parallel.waitForAll(__Update_Service_Start_,__StartSer1)
    end
    function __StartSer3()
        parallel.waitForAll(__Monitor_Service_Start_,__StartSer2)
    end
    parallel.waitForAll(__Config_Service_Start_,__StartSer3)
sr("BOOT1-01","OS return")
end

function start()
if __RitoOS__Boot_Started == true then
    print("RitoOS is already running.")
    return false
else
print("Loading System API")
os.loadAPI("/System/APIs/System/system")
__RitoOS__Boot_Started = true
term.clearLine()
PrintCentered("RitoOS")
system.reloadLog()
system.log("Booting","- Booting RitoOS -")
system.outputInfo("Creating RitoOS main window","Window manager")
local X,Y = term.getSize()
local native = term.current()
_RitoOS_Main_Window = window.create(native,1,1,X,Y,true)
system.outputInfo("Attempting redirect to RitoOS main window","Window manager")
term.redirect(_RitoOS_Main_Window)
system.outputInfo("Redirect to RitoOS main window established","Window manager")
system.outputInfo("RitoOS version "..__RitoOS_Version,"RitoOS")
system.outputInfo("Setting global os functions","RitoOS")
parallel.waitForAll(__Boot1,__RitoOS_Global_Functions)
sr("BOOT-00","OS return/internal error")
end
end

function TimeKeeper()
    __RitoOS_Time = 0
    while true do
        function os.uptime()
            return __RitoOS_Time
        end
        sleep(0)
        __RitoOS_Time = __RitoOS_Time + 0.05
    end
end

parallel.waitForAll(TimeKeeper,start)
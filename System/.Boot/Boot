--[[


                        _________
                       |_|_|_|_|_|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
                         |__|__|
      ___________________|__|__|___
     /                             \
    /     Rito OS, Created By:      \
   /          @Watsuprico            \
  /                                   \
 /   Bedrock API/Framwork Created By:  \
/                                       \
|_______________________________________|
|                                       |
|   _______                   _______   |
|  |   |   |                 |   |   |  |
|  |---|---|                 |---|---|  |
|  |___|___|                 |___|___|  |
|                                       |
|                                       |
|                                       |
|               _________               |
|              |         |              |
|              |  Rito   |              |
|              |         |              |
|              |       Ïƒ |              |
|              |         |              |
|______________|_________|______________|
]]--
-- Vars
local ALERTCOLOR = 16384
local WARNCOLOR = 2
local INFOCOLOR = 8192
local NOTECOLOR = 512
local ErrBGC = 32768
local RitoOSVersion = "1.0.0"
local logo = {                                  --|
  "  9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9",
  " 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 ",
  " 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 ",
  " 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 ",
  "9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9  ",
  "9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9  ",
  "9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9 d 1 9  ",
}
--End vars

function os.version()
    return RitoOSVersion
end
function os.pullEvent( sFilter )
    local eventData = { os.pullEventRaw( sFilter ) }
    if eventData[1] == "terminate" then
    end
    return unpack( eventData )
end
local nativeShutdown = os.shutdown
function os.shutdown()
    print("Shuting down . . .")
    if __RitLock__Ran == true then
        if __RitLock___Save___Hash___Value_ ~= nil then
        print("RitLock: Copying Backuped Files...")
        --Boot
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot") == true then
            if fs.exists("/System/.Boot/Boot") == true then
                fs.delete("/System/.Boot/Boot")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot","/System/.Boot/Boot")
        end
        --RitRun
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/") == true then
            if fs.isDir("/System/.RitRun/") == true then
                fs.delete("/System/.RitRun/")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/","/System/.RitRun/")
        end
        --Recovery
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/") == true then
            if fs.isDir("/System/.Recovery/") == true then
                fs.delete("/System/.Recovery/")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/","/System/.Recovery/")
        end
        --CodeX
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf") == true then
            if fs.exists("/System/CodeX.rxf") == true then
                fs.delete("/System/CodeX.rxf")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf","/System/CodeX.rxf")
        end
        --Explorera
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf") == true then
            if fs.exists("/System/Explorera.rxf") == true then
                fs.delete("/System/Explorera.rxf")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf","/System/Explorera.rxf")
        end
        print("RitLock: Deleting Backups...")
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_) == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_)
        end
        if fs.exists("/System/.RitLock/.RitLockHash") == true then
            fs.delete("/System/.RitLock/.RitLockHash")
        end
        print("RitLock: Done!")
    end
    end
    -- Updater
    if __RitoOSUpdater__Reboot_To_Complete_Updates == true then
        local UpdateStartupFile = assert(io.open("/Startup", "w"))
        UpdateStartupFile:write("LastShutdownSuccessful = '238N@Ne8jd#*nc'\n__RitoOSUpdater__Reboot_To_Complete_Updates = true\nshell.run('/System/.Boot/Boot')")
        UpdateStartupFile:close()
    else
        local UpdateStartupFile = assert(io.open("/Startup", "w"))
        UpdateStartupFile:write("LastShutdownSuccessful = '238N@Ne8jd#*nc'\nshell.run('/System/.Boot/Boot')")
        UpdateStartupFile:close()
    end
    --Recover
    if __RitoOS__Enter_Recovery == true then
        local rlock = fs.open("/Startup", "r")
        local a = rlock.readAll()
        rlock.close()
        local rlockInput = fs.open("/Startup", "w")
        rlockInput.write(a.."\n__RitoOS__Enter_Recovery = true")
        rlockInput.close()
    end
    nativeShutdown()
    while true do
        coroutine.yield()
    end
end
local nativeReboot = os.reboot
function os.reboot()
    print("Rebooting . . .")
    if __RitLock__Ran == true then
        if __RitLock___Save___Hash___Value_ ~= nil then
            print("RitLock: Copying Backuped Files...")
        --Boot
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot") == true then
            if fs.exists("/System/.Boot/Boot") == true then
                fs.delete("/System/.Boot/Boot")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot","/System/.Boot/Boot")
        end
        --RitRun
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/") == true then
            if fs.isDir("/System/.RitRun/") == true then
                fs.delete("/System/.RitRun/")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/","/System/.RitRun/")
        end
        --Recovery
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/") == true then
            if fs.isDir("/System/.Recovery/") == true then
                fs.delete("/System/.Recovery/")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/","/System/.Recovery/")
        end
        --CodeX
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf") == true then
            if fs.exists("/System/CodeX.rxf") == true then
                fs.delete("/System/CodeX.rxf")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf","/System/CodeX.rxf")
        end
        --Explorera
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf") == true then
            if fs.exists("/System/Explorera.rxf") == true then
                fs.delete("/System/Explorera.rxf")
            end
            fs.copy("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf","/System/Explorera.rxf")
        end
        print("RitLock: Deleting Backups...")
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_) == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_)
        end
        print("RitLock: Done!")
    end
    end
    -- Updater
    if __RitoOSUpdater__Reboot_To_Complete_Updates == true then
        local UpdateStartupFile = assert(io.open("/Startup", "w"))
        UpdateStartupFile:write("LastShutdownSuccessful = '238N@Ne8jd#*nc'\n__RitoOSUpdater__Reboot_To_Complete_Updates = true\nshell.run('/System/.Boot/Boot')")
        UpdateStartupFile:close()
    else
        local UpdateStartupFile = assert(io.open("/Startup", "w"))
        UpdateStartupFile:write("LastShutdownSuccessful = '238N@Ne8jd#*nc'\nshell.run('/System/.Boot/Boot')")
        UpdateStartupFile:close()
    end
    --Recover
    if __RitoOS__Enter_Recovery == true then
        local rlock = fs.open("/Startup", "r")
        local a = rlock.readAll()
        rlock.close()
        local rlockInput = fs.open("/Startup", "w")
        rlockInput.write(a.."\n__RitoOS__Enter_Recovery = true")
        rlockInput.close()
    end
    nativeReboot()
    while true do
        coroutine.yield()
    end
end


-- Functions
local function trunc(s, i)
    local mult = 10^(i or 0)
    return math.floor(s * mult + 0.5) / mult
end
local function ALERT(m)
    term.setTextColor(ALERTCOLOR)
    print("[ "..trunc(os.time() * 50).." - ALERT] "..m)
    term.setTextColor(colors.black)
end
local function WARN(m)
    term.setTextColor(WARNCOLOR)
    print("[ "..trunc(os.time() * 50).." - WARN] "..m)
    term.setTextColor(colors.black)
end
local function INFO(m)
    term.setTextColor(INFOCOLOR)
    print("[ "..trunc(os.time() * 50).." - Info] "..m)
    term.setTextColor(colors.black)
end
local function NOTE(m)
    term.setTextColor(NOTECOLOR)
    print("[ "..trunc(os.time() * 50).." - Notify] "..m)
    term.setTextColor(colors.black)
end
local function PrintCentered(m)
local _mL = string.len(m)
local _scw,_ = term.getSize()
local _xC = tonumber(math.ceil((_scw / 2) - (_mL / 2)))
local _,tY = term.getCursorPos()
term.setCursorPos(_xC,tY)
print(m)
end -- End function
local function loadConfig()
    while true do
        if shell.run("/Configs/.Rito.conf") == true then
            __RitoOS_ConfigRan_ = true
        else
            __RitoOS_ConfigRan_ = false
        end
        sleep(0)
    end
end
local function start()
    pbar:triggerUpdate("/-Setting Computer Label -/")
    os.setComputerLabel(""..ComputerName.."")
    pbar:triggerUpdate("/- Loading Bedrock API -/")
    local bedrockPath='APIs/Bedrock' if OneOS then OneOS.LoadAPI('/System/API/Bedrock.lua', false)elseif fs.exists(bedrockPath..'/Bedrock')then os.loadAPI(bedrockPath..'/Bedrock')else if http then print('Downloading Bedrock...')local h=http.get('http://pastebin.com/raw.php?i=0MgKNqpN')if h then local f=fs.open(bedrockPath..'/Bedrock','w')f.write(h.readAll())f.close()h.close()os.loadAPI(bedrockPath..'/Bedrock')else error('Failed to download Bedrock. Is your internet working?') end else error('This program needs to download Bedrock to work. Please enable HTTP.') end end if Bedrock then Bedrock.BasePath = bedrockPath Bedrock.ProgramPath = shell.getRunningProgram() end
    pbar:triggerUpdate("/- RitoOS loaded, starting CodeX -/")
    sleep(0.1)
    shell.run("/System/CodeX.rxf")
end -- Ends function
local function RitLockProtectionHashSave()
    while true do
        l = 10
        local __temp__ritlock_s = "" -- Start string
            for i = 1, l do
                __temp__ritlock_s = __temp__ritlock_s .. string.char(math.random(35, 126)) -- Generate random number from 32 to 126, turn it into character and add to string
            end
        local _Temp_RitLock_Save = StrUtils.encrypt(__RitLock___Save___Hash___Value_,__temp__ritlock_s)
        local rlockInput = fs.open("/System/.RitLock/.RitLockHash", "w")
        rlockInput.write('HashValue = "'.._Temp_RitLock_Save..'"\nKey = "'..__temp__ritlock_s..'"')
        rlockInput.close()
        local __temp__ritlock_s = nil
        sleep(5)
    end
end
local function RitLockProtection()
    while true do
        __RitLock__Ran = true
        --Boot
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot") == true then
            local rlock = fs.open("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot", "r")
            local a = rlock.readAll()
            rlock.close()
            local rlockInput = fs.open("/System/.Boot/Boot", "w")
            rlockInput.write(a)
            rlockInput.close()
        end
        --RitRun
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/RitRun.rkf") == true then
            local rlock = fs.open("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/RitRun.rkf", "r")
            local a = rlock.readAll()
            rlock.close()
            local rlockInput = fs.open("/System/.RitRun/RitRun.rkf", "w")
            rlockInput.write(a)
            rlockInput.close()
        end
        --Recovery
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/.Recover") == true then
            local rlock = fs.open("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/.Recover", "r")
            local a = rlock.readAll()
            rlock.close()
            local rlockInput = fs.open("/System/.Recovery/.Recover", "w")
            rlockInput.write(a)
            rlockInput.close()
        end
        --CodeX
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf") == true then
            local rlock = fs.open("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf", "r")
            local a = rlock.readAll()
            rlock.close()
            local rlockInput = fs.open("/System/CodeX.rxf", "w")
            rlockInput.write(a)
            rlockInput.close()
        end
        --Explorera
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf") == true then
            local rlock = fs.open("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf", "r")
            local a = rlock.readAll()
            rlock.close()
            local rlockInput = fs.open("/System/Explorera.rxf", "w")
            rlockInput.write(a)
            rlockInput.close()
        end
        --Startup script
        local rlockInput = fs.open("/Startup", "w")
        rlockInput.write("shell.run('/System/.Boot/Boot')")
        rlockInput.close()
        sleep(0) --Anti-lock 
    end --WhileLoop
end --RitLockProtection Function
local function RitLockProtectionPre()
    parallel.waitForAll(RitLockProtection,RitLockProtectionHashSave)
end
local function RitLock()
if __RitLock__Enabled == true then
    pbar:triggerUpdate("/- RitLock protection loading -/")
    sleep(0)
    pbar:triggerUpdate("/- Creating keys -/")
    sleep(0)
    __RitLock___Save___Hash___Value_ = StrUtils.SHA1(trunc(os.time() * 50))
    pbar:triggerUpdate("/- Copying files -/")
    sleep(0)
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot") == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot")
        end
        fs.copy("/System/.Boot/Boot","/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Boot/Boot")
    pbar:triggerUpdate("/- Copying 'RitLock' -/")
    sleep(0)
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/") == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/")
        end
        fs.copy("/System/.RitRun/","/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.RitRun/")
    pbar:triggerUpdate("/- Copying 'Recovery' -/")
    sleep(0)
        if fs.isDir("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/") == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/")
        end
        fs.copy("/System/.Recovery/","/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/.Recovery/")
    pbar:triggerUpdate("/- Copying 'CodeX.rxf' -/")
    sleep(0)
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf") == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf")
        end
        fs.copy("/System/CodeX.rxf","/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/CodeX.rxf")
    pbar:triggerUpdate("/- Copying 'Explorera.rxf -/")
    sleep(0)
        if fs.exists("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf") == true then
            fs.delete("/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf")
        end
        fs.copy("/System/Explorera.rxf","/.RitLock"..__RitLock___Save___Hash___Value_.."/.Files/System/Explorera.rxf")
        parallel.waitForAll(RitLockProtectionPre,start)
        printError("| - RitoOS has stopped responding - |")
        printError("| - Code: RXF-0-BOOT-MAIN-END-000")
        printError("| - Please, press any key to reboot - |")
        sleep(1)
        os.pullEvent("key")
        os.reboot()
else
    pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!") pbar:triggerUpdate("RitLock protection disabled! System can files can and may be effected!")
    start()
end --if enabled
end --RitLock()

local function CheckForUpdates()
    sleep(0)
    pbar:triggerUpdate("/- Checking for updates -/")
    if __RitoOSUpdater__Reboot_To_Complete_Updates == true then
        if fs.isDir("/System/.Updates/") == true then
            pbar:triggerUpdate("/- Updating Boot -/")
            if fs.exists("/System/.Updates/System/.Boot/Boot") == true then
                fs.delete("/System/.Boot/Boot")
                fs.move("/System/.Updates/System/.Boot/Boot","/System/.Boot/Boot")
            end
            pbar:triggerUpdate("/- Updating RitRun -/")
            if fs.exists("/System/.Updates/System/.RitRun/RitRun.rkf") == true then
                fs.delete("/System/.RitRun/RitRun.rkf")
                fs.move("/System/.Updates/System/.RitRun/RitRun.rkf","/System/.RitRun/RitRun.rkf")
            end
            pbar:triggerUpdate("/- Updating Recovery -/")
            if fs.exists("/System/.Updates/System/.Recovery/.Recover") == true then
                fs.delete("/System/.Recovery/.Recover")
                fs.move("/System/.Updates/System/.Recovery/.Recover","/System/.Recovery/.Recover")
            end
            pbar:triggerUpdate("/- Updating CodeX -/")
            if fs.exists("/System/.Updates/System/CodeX.rxf") == true then
                fs.delete("/System/CodeX.rxf")
                fs.move("/System/.Updates/System/CodeX.rxf","/System/CodeX.rxf")
            end
            pbar:triggerUpdate("/- Updating Explorera -/")
            if fs.exists("/System/.Updates/System/Explorera.rxf") == true then
                fs.delete("/System/Explorera.rxf")
                fs.move("/System/.Updates/System/Explorera.rxf","/System/Explorera.rxf")
            end
            pbar:triggerUpdate("/- Update complete! Rebooting -/") -- Pbar 7
            local UpdateStartupFile = assert(io.open("/Startup", "w"))
            UpdateStartupFile:write("shell.run('/System/.Boot/Boot')")
            UpdateStartupFile:close()
            sleep(1)
            os.reboot()
        else
            pbar:triggerUpdate("/- Set to update, however, no update files were found -/")
            sleep(1)
        end
    end
    RitLock()
end

term.clear()
term.setCursorPos(1,1)
local function error(m)
    ALERT(m)
end
INFO("/- RitoOS version "..RitoOSVersion.." -/")
INFO("/- The ProgressBar by TheOriginalBit will now load -/")
os.loadAPI("/APIs/ProgressBar/bar")
INFO("/- Bar loaded, setting up loading logo -/")
pbar = bar.init( bar.LOGO_IS_OVERLAY, logo, 15, nil, 14, nil, "/- Loading Rito OS -/", "/- Rito OS -/", "| - Rito OS Version "..RitoOSVersion.." - |" )
local function ProgressBarB()
    pbar:run(true)
    sleep(0)
end
local function _barLoaded()
pbar:triggerUpdate("/- Loading RitRun -/")
os.loadAPI("/System/.RitRun/RitRun")
pbar:triggerUpdate("/- Loading StrUtils API -/")
os.loadAPI("APIs/StrUtils/StrUtils")
pbar:triggerUpdate("/- Checking last shutdown state -/")
if LastShutdownSuccessful ~= "238N@Ne8jd#*nc" then
    if fs.exists("/System/.RitLock/.RitLockHash") == true then
        shell.run("/System/.RitLock/.RitLockHash")
        local Hash = StrUtils.decrypt(HashValue,Key)
        if fs.isDir("/.RitLock"..Hash) == true then
            fs.delete("/.RitLock"..Hash)
             fs.delete("/System/.RitLock/.RitLockHash")
        end
    end
end
pbar:triggerUpdate("/- Checking recovery state -/")
if __RitoOS__Enter_Recovery == true then
    pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|") pbar:triggerUpdate("|Booting recovery mode|")
    shell.run("/System/.Recovery/.Recover")
    printError("| - RitoOS has stopped responding - |")
    printError("| - Code: RXF-0-BOOT-MAIN-END-001")
    printError("| - Please, press any key to reboot - |")
    sleep(1)
    os.pullEvent("key")
    os.reboot()
end
parallel.waitForAll(loadConfig,CheckForUpdates)
term.clear()
printError("| - RitoOS has stopped responding - |")
printError("| - Code: RXF-0-BOOT-MAIN-END-002")
printError("| - Please, press any key to reboot - |")
sleep(1)
os.pullEvent("key")
os.reboot()
end -- End bar loaded
parallel.waitForAll(ProgressBarB,_barLoaded)
printError("| - RitoOS has stopped responding - |")
printError("| - Code: RXF-0-BOOT-MAIN-END-003")
printError("| - Please, press any key to reboot - |")
sleep(1)
os.pullEvent("key")
os.reboot()
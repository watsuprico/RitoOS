--[[ 
	Crypto API
	
	Simply a collection of different crypto APIs

	--> These functions are found freely online. I do NOT claim any work below (other than merging them together)
	--> Truthfully, I do not have enough of an understanding to be able to write these.
	--> If possible links to original posts will be provided. IF none is provided I've likely lost it :(

	While security is desired here, there are absolutely ZERO (0) guarantees that any of the following is "secure" or "secure code"!

]]

-- CRC32 (source unknown)
local max = 2^32 -1

local CRC32 = {
	0,79764919,159529838,222504665,319059676,
	398814059,445009330,507990021,638119352,
	583659535,797628118,726387553,890018660,
	835552979,1015980042,944750013,1276238704,
	1221641927,1167319070,1095957929,1595256236,
	1540665371,1452775106,1381403509,1780037320,
	1859660671,1671105958,1733955601,2031960084,
	2111593891,1889500026,1952343757,2552477408,
	2632100695,2443283854,2506133561,2334638140,
	2414271883,2191915858,2254759653,3190512472,
	3135915759,3081330742,3009969537,2905550212,
	2850959411,2762807018,2691435357,3560074640,
	3505614887,3719321342,3648080713,3342211916,
	3287746299,3467911202,3396681109,4063920168,
	4143685023,4223187782,4286162673,3779000052,
	3858754371,3904687514,3967668269,881225847,
	809987520,1023691545,969234094,662832811,
	591600412,771767749,717299826,311336399,
	374308984,453813921,533576470,25881363,
	88864420,134795389,214552010,2023205639,
	2086057648,1897238633,1976864222,1804852699,
	1867694188,1645340341,1724971778,1587496639,
	1516133128,1461550545,1406951526,1302016099,
	1230646740,1142491917,1087903418,2896545431,
	2825181984,2770861561,2716262478,3215044683,
	3143675388,3055782693,3001194130,2326604591,
	2389456536,2200899649,2280525302,2578013683,
	2640855108,2418763421,2498394922,3769900519,
	3832873040,3912640137,3992402750,4088425275,
	4151408268,4197601365,4277358050,3334271071,
	3263032808,3476998961,3422541446,3585640067,
	3514407732,3694837229,3640369242,1762451694,
	1842216281,1619975040,1682949687,2047383090,
	2127137669,1938468188,2001449195,1325665622,
	1271206113,1183200824,1111960463,1543535498,
	1489069629,1434599652,1363369299,622672798,
	568075817,748617968,677256519,907627842,
	853037301,1067152940,995781531,51762726,
	131386257,177728840,240578815,269590778,
	349224269,429104020,491947555,4046411278,
	4126034873,4172115296,4234965207,3794477266,
	3874110821,3953728444,4016571915,3609705398,
	3555108353,3735388376,3664026991,3290680682,
	3236090077,3449943556,3378572211,3174993278,
	3120533705,3032266256,2961025959,2923101090,
	2868635157,2813903052,2742672763,2604032198,
	2683796849,2461293480,2524268063,2284983834,
	2364738477,2175806836,2238787779,1569362073,
	1498123566,1409854455,1355396672,1317987909,
	1246755826,1192025387,1137557660,2072149281,
	2135122070,1912620623,1992383480,1753615357,
	1816598090,1627664531,1707420964,295390185,
	358241886,404320391,483945776,43990325,
	106832002,186451547,266083308,932423249,
	861060070,1041341759,986742920,613929101,
	542559546,756411363,701822548,3316196985,
	3244833742,3425377559,3370778784,3601682597,
	3530312978,3744426955,3689838204,3819031489,
	3881883254,3928223919,4007849240,4037393693,
	4100235434,4180117107,4259748804,2310601993,
	2373574846,2151335527,2231098320,2596047829,
	2659030626,2470359227,2550115596,2947551409,
	2876312838,2788305887,2733848168,3165939309,
	3094707162,3040238851,2985771188,
}

local function xor(a, b)
	local calc = 0
	for i = 32, 0, -1 do
		local val = 2 ^ i
		local aa = false
		local bb = false
		if a == 0 then
			calc = calc + b
			break
		end
		if b == 0 then
			calc = calc + a
			break
		end
		if a >= val then
			aa = true
			a = a - val
		end
		if b >= val then
			bb = true
			b = b - val
		end
		if not (aa and bb) and (aa or bb) then
			calc = calc + val
		end
	end

	return calc
end

local function lshift(num, left)
	local res = num * (2 ^ left)
	return res % (2 ^ 32)
end

local function rshift(num, right)
	local res = num / (2 ^ right)
	return math.floor(res)
end

local CRC32 = function(str)
	local count = string.len(tostring(str))
	local crc = max
	local i = 1
	while count > 0 do
		local byte = string.byte(str, i)
		crc = xor(lshift(crc, 8), CRC32[xor(rshift(crc, 24), byte) + 1])
		i = i + 1
		count = count - 1
	end
	return crc
end





-- SHA-256, HMAC and PBKDF2 functions in ComputerCraft
-- By Anavrins (Discord: Anavrins#4600)
-- MIT License
-- Pastebin: https://pastebin.com/6UV4qfNF
-- Usage: https://pastebin.com/q2SQ7eRg
-- Last updated: Nov 13 2021
 
local mod32 = 2^32
local band = bit32 and bit32.band or bit.band
local bnot = bit32 and bit32.bnot or bit.bnot
local bxor = bit32 and bit32.bxor or bit.bxor
local blshift = bit32 and bit32.lshift or bit.blshift
local upack = unpack
 
local function rrotate(n, b)
	local s = n/(2^b)
	local f = s%1
	return (s-f) + f*mod32
end
local function brshift(int, by)
	local s = int / (2^by)
	return s - s%1
end
 
local H = { -- First 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
	0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
}
 
local K = { -- First 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
}
 
local function counter(incr)
	local t1, t2 = 0, 0
	if 0xFFFFFFFF - t1 < incr then
		t2 = t2 + 1
		t1 = incr - (0xFFFFFFFF - t1) - 1
	else t1 = t1 + incr
	end
	return t2, t1
end
 
local function BE_toInt(bs, i)
	return blshift((bs[i] or 0), 24) + blshift((bs[i+1] or 0), 16) + blshift((bs[i+2] or 0), 8) + (bs[i+3] or 0)
end
 
local function preprocess(data)
	local len = #data
	local proc = {}
	data[#data+1] = 0x80
	while #data%64~=56 do data[#data+1] = 0 end
	local blocks = math.ceil(#data/64)
	for i = 1, blocks do
		proc[i] = {}
		for j = 1, 16 do
			proc[i][j] = BE_toInt(data, 1+((i-1)*64)+((j-1)*4))
		end
	end
	proc[blocks][15], proc[blocks][16] = counter(len*8)
	return proc
end
 
local function digestblock(w, C)
	for j = 17, 64 do
		local v = w[j-15]
		local s0 = bxor(rrotate(w[j-15], 7), rrotate(w[j-15], 18), brshift(w[j-15], 3))
		local s1 = bxor(rrotate(w[j-2], 17), rrotate(w[j-2], 19),brshift(w[j-2], 10))
		w[j] = (w[j-16] + s0 + w[j-7] + s1)%mod32
	end
	local a, b, c, d, e, f, g, h = upack(C)
	for j = 1, 64 do
		local S1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))
		local ch = bxor(band(e, f), band(bnot(e), g))
		local temp1 = (h + S1 + ch + K[j] + w[j])%mod32
		local S0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))
		local maj = bxor(bxor(band(a, b), band(a, c)), band(b, c))
		local temp2 = (S0 + maj)%mod32
		h, g, f, e, d, c, b, a = g, f, e, (d+temp1)%mod32, c, b, a, (temp1+temp2)%mod32
	end
	C[1] = (C[1] + a)%mod32
	C[2] = (C[2] + b)%mod32
	C[3] = (C[3] + c)%mod32
	C[4] = (C[4] + d)%mod32
	C[5] = (C[5] + e)%mod32
	C[6] = (C[6] + f)%mod32
	C[7] = (C[7] + g)%mod32
	C[8] = (C[8] + h)%mod32
	return C
end
 
local mt = {
	__tostring = function(a) return string.char(unpack(a)) end,
	__index = {
		toHex = function(self, s) return ("%02x"):rep(#self):format(unpack(self)) end,
		isEqual = function(self, t)
			if type(t) ~= "table" then return false end
			if #self ~= #t then return false end
			local ret = 0
			for i = 1, #self do
				ret = bit32.bor(ret, bxor(self[i], t[i]))
			end
			return ret == 0
		end,
		sub = function(self, a, b)
			local len = #self+1
			local start = a%len
			local stop = (b or len-1)%len
			local ret = {}
			local i = 1
			for j = start, stop, start<stop and 1 or -1 do
				ret[i] = self[j]
				i = i+1
			end
			return setmetatable(ret, byteArray_mt)
		end,
	}
}
 
local function toBytes(t, n)
	local b = {}
	for i = 1, n do
		b[(i-1)*4+1] = band(brshift(t[i], 24), 0xFF)
		b[(i-1)*4+2] = band(brshift(t[i], 16), 0xFF)
		b[(i-1)*4+3] = band(brshift(t[i], 8), 0xFF)
		b[(i-1)*4+4] = band(t[i], 0xFF)
	end
	return setmetatable(b, mt)
end
 
local function digest(data)
	local data = data or ""
	data = type(data) == "table" and {upack(data)} or {tostring(data):byte(1,-1)}
	data = preprocess(data)
	local C = {upack(H)}
	for i = 1, #data do C = digestblock(data[i], C) end
	return toBytes(C, 8)
end
 
local function hmac(data, key)
	local data = type(data) == "table" and {upack(data)} or {tostring(data):byte(1,-1)}
	local key = type(key) == "table" and {upack(key)} or {tostring(key):byte(1,-1)}
	local blocksize = 64
	key = #key > blocksize and digest(key) or key
	local ipad = {}
	local opad = {}
	local padded_key = {}
	for i = 1, blocksize do
		ipad[i] = bxor(0x36, key[i] or 0)
		opad[i] = bxor(0x5C, key[i] or 0)
	end
	for i = 1, #data do
		ipad[blocksize+i] = data[i]
	end
	ipad = digest(ipad)
	for i = 1, blocksize do
		padded_key[i] = opad[i]
		padded_key[blocksize+i] = ipad[i]
	end
	return digest(padded_key)
end
 
local function pbkdf2(pass, salt, iter, dklen)
	local salt = type(salt) == "table" and salt or {tostring(salt):byte(1,-1)}
	local hashlen = 32
	local dklen = dklen or 32
	local block = 1
	local out = {}
	while dklen > 0 do
		local ikey = {}
		local isalt = {upack(salt)}
		local clen = dklen > hashlen and hashlen or dklen
		isalt[#isalt+1] = band(brshift(block, 24), 0xFF)
		isalt[#isalt+1] = band(brshift(block, 16), 0xFF)
		isalt[#isalt+1] = band(brshift(block, 8), 0xFF)
		isalt[#isalt+1] = band(block, 0xFF)
		for j = 1, iter do
			isalt = hmac(isalt, pass)
			for k = 1, clen do ikey[k] = bxor(isalt[k], ikey[k] or 0) end
			if j % 200 == 0 then sleep(0) end
		end
		dklen = dklen - clen
		block = block+1
		for k = 1, clen do out[#out+1] = ikey[k] end
	end
	return setmetatable(out, mt)
end







-- local AES = System.GetAPI("AES");
local ChaCha20 = System.GetAPI("ChaCha20");
-- local RandomGenerator = System.GetAPI("RandomGenerator");
-- local EllipticCurveCryptography = System.GetAPI("ECC"); -- Issue is, ECC requires this API ... which results in a circular dependency graph, so it'll have to be grabbed separately.
-- To solve that, the System.GetAPI() function will grab and insert those two when someone grabs the Crypto API


-- Return functions

return {
	CRC32 = CRC32,

	Sha256 = function(data)
		return digest(data):toHex()
	end,
	HMAC = hmac,
	PBKDF2 = pbkdf2,
	
	ChaCha20 = ChaCha20,

	-- AES = AES,
	-- Random = RandomGenerator,
	-- ECC = EllipticCurveCryptography,
};